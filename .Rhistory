pb <- winProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setWinProgressBar(pb, i, title=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
# Text-baed progress bar ####
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
# Text-baed progress bar ####
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 1)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 2)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 4)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
# Pull data ####
data_dir <- setwd('C:\Users\shh6304\Desktop\CEAS and NSC\obtained_data')
# Pull data ####
data_dir <- setwd('C:/Users/shh6304/Desktop/CEAS and NSC/obtained_data')
library(NSC)
?prepare_data
list.files(path=data_dir)
# Pull data ####
data_dir <- setwd('C:/Users/shh6304/Desktop/CEAS and NSC/obtained_data')
list.files(path = data_dir)
list.files(path=data_dir)[4]
prepare_data(file_dir = data_dir,
file_name = list.files(path=data_dir)[4])
ceas <- prepare_data(file_dir = data_dir,
file_name = list.files(path=data_dir)[4])
head(ceas)
?NSC
?one_from_Graduated
?for_NSC_crosstab
# crosstab
ceas <- for_NSC_crosstab(file_dir = data_dir,
file_name = list.files(path=data_dir)[4],
college_name = "WESTERN MICHIGAN UNIVERSITY")
ceas <- prepare_data(file_dir = data_dir,
file_name = list.files(path=data_dir)[4])
# crosstab
ceas2 <- for_NSC_crosstab(file_dir = data_dir,
file_name = list.files(path=data_dir)[4],
college_name = "WESTERN MICHIGAN UNIVERSITY")
ceas2
# crosstab
ceas2 <- for_NSC_crosstab(file_dir = data_dir,
file_name = list.files(path=data_dir)[4],
college_name = "WESTERN MICHIGAN UNIVERSITY",
x = ceas)
ceas <- prepare_data(file_dir = data_dir,
file_name = list.files(path=data_dir)[4])
# crosstab
ceas2 <- for_NSC_crosstab(file_dir = data_dir,
file_name = list.files(path=data_dir)[4],
college_name = "WESTERN MICHIGAN UNIVERSITY",
x = ceas)
file_dir = data_dir
file_name = list.files(path=data_dir)[4]
college_name = "WESTERN MICHIGAN UNIVERSITY"
x = ceas
# crosstab
ceas2 <- for_NSC_crosstab(file_dir = data_dir,
file_name = list.files(path=data_dir)[4],
college_name = "WESTERN MICHIGAN UNIVERSITY",
x = NULL)
require("dplyr")
if (is.null(x)){
# Pull data ####
data <- read.csv(paste0(getwd(), "/", file_name),
header=TRUE, check.names = TRUE)
# Remove "." in names
names(data) <- gsub("\\.", "", names(data))
} else {
data <- x
if (is.null(college_name)){
stop("Please provide a value for college_name.")
}
}
# Step 1: get one enrollment ####
## In higher ed sys (IN_HES) or not
# set up in higher ed system or not after WMU
# Step1: working with RecordFoundYN not from your institution####
enr1 <- data %>%
filter(CollegeName != college_name) %>%
select(RequesterReturnField, RecordFoundYN) %>%
distinct() %>%
mutate(IN_HES = case_when(RecordFoundYN == "Y" ~ "Y",
RecordFoundYN == "N" ~ "N")) %>%
select(RequesterReturnField, RecordFoundYN, IN_HES)
# Step 2: working with students enrolled at your institution ####
#library(NSC)
set2 <- NSC::your_college(x=data,
target_college <- college_name)
your_institution_students <- set2$all
# add a column to enr1 for unioning
enr2 <- cbind(enr1, RE_RETURN = "N/A")
# Union enr1 and out_hes
enr_final <- union_all(enr2, your_institution_students)
college_type <- NSC::college_length(x=data)
# Step 4: get graduation ####
graduated_all <- NSC::one_from_Graduated(x=data)
# Step 5: Get degree levels ####
students_highestd <- NSC::highest_degree(x=data)
# Step 2: working with students enrolled at your institution ####
#library(NSC)
set2 <- NSC::your_college(x=data,
target_college <- college_name)
your_institution_students <- set2$all
# add a column to enr1 for unioning
enr2 <- cbind(enr1, RE_RETURN = "N/A")
enr2
# Union enr1 and out_hes
enr_final <- union_all(enr2, your_institution_students)
college_type <- NSC::college_length(x=data)
# Step 4: get graduation ####
graduated_all <- NSC::one_from_Graduated(x=data)
# Step 5: Get degree levels ####
students_highestd <- NSC::highest_degree(x=data)
highest_degree(x=data)
# select DegreeTitles that are present
x2 <- x %>%
select(RequesterReturnField, X2year4year, DegreeTitle) %>%
filter(DegreeTitle!="")
# changing values of degrees that conflict with each other
x2[x2=="MBA"] <- "MASTER OF Business Administration"
x2[x2=="MASTER OF BUSINESS ADMINISTRATION"] <- "MASTER OF Business Administration"
x2[x2=="MASTER OF BUSINESS ADMINISTRAT"] <- "MASTER OF Business Administration"
x2[x2=="MASTER OF BUSINESS ADMIN."] <- "MASTER OF Business Administration"
x2[x2=="MASTER OF BUSINESS ADMIN"] <- "MASTER OF Business Administration"
x2[x2=="MAC"] <- "MASTER"
x2[x2=="AS"] <- "ASSOCIATE DEGREE"
x2[x2=="BAA"] <- "BACHELOR DEGREE"
x2[x2=="BA"] <- "BACHELOR OF ARTS"
x2[x2=="BS"] <- "BACHELOR OF SCIENCE"
x2[x2=="CT"] <- "CERTIFICATE"
x2[x2=="BA LIBERAL ARTS AND SCIENCE"] <- "BACHELOR OF ARTS AND SCIENCE"
x3 <- cbind(x2, degree_level="N/A")
degree_title_col_num <- 3
for (i in 1:nrow(x3)){
if(grepl("ASSOCIATE", x3[i,degree_title_col_num])|
grepl("ASSOC", x3[i,degree_title_col_num])|
grepl("A.A", x3[i,degree_title_col_num])|
grepl("AS DEGREE", x3[i,degree_title_col_num])|
grepl("AS -", x3[i,degree_title_col_num])|
grepl("AA", x3[i,degree_title_col_num])|
grepl("A.S.", x3[i,degree_title_col_num])|
grepl("A.SCI.", x3[i,degree_title_col_num])|
grepl("A.G.S.", x3[i,degree_title_col_num])|
grepl("MACRAO", x3[i,degree_title_col_num])|
grepl("PRACTICAL NURSING", x3[i,degree_title_col_num])|
grepl("A.B.A.", x3[i,degree_title_col_num])){
x3[i,dim(x3)[2]] = "A"
} else if (grepl(".*BACH.*", x3[i,degree_title_col_num])|
grepl(".*UNDERG.*", x[i,degree_title_col_num])|
grepl("BS.", x3[i,degree_title_col_num])|
grepl("B.S.", x3[i,degree_title_col_num])|
#grepl("B S.", x3[i,degree_title_col_num])|
grepl("B. S.", x3[i,degree_title_col_num])|
grepl("BFA", x3[i,degree_title_col_num])|
grepl("B A", x3[i,degree_title_col_num])|
grepl("B B A.", x3[i,degree_title_col_num])|
grepl("BBA", x3[i,degree_title_col_num])|
grepl("B.B.A.", x3[i,degree_title_col_num])|
grepl("BACH", x3[i,degree_title_col_num])|
grepl("BA IN", x3[i,degree_title_col_num])|
grepl("BA ", x3[i,degree_title_col_num])|
grepl("UNDERGRADUATE", x3[i,degree_title_col_num])
){
x3[i,dim(x3)[2]] = "B"
} else if (grepl("ADDITIONAL MAJOR", x3[i,degree_title_col_num])|
grepl(".*MINOR.*", x3[i,degree_title_col_num])){
x3[i,dim(x3)[2]] = "B_MAJOR/MINOR" # additional major/minor
} else if (grepl("CERT", x3[i,degree_title_col_num])|
grepl("CERTIFICATE", x3[i,degree_title_col_num])|
grepl("CRT", x3[i,degree_title_col_num])|
grepl("CORE CURRICULUM", x3[i,degree_title_col_num])|
grepl("GC", x3[i,degree_title_col_num])|
grepl("DIPLOMA", x3[i,degree_title_col_num])|
grepl("NON DEGREE", x3[i,degree_title_col_num])|
grepl("SPECIALIST", x3[i,degree_title_col_num])|
grepl("CREDENTIAL", x3[i,degree_title_col_num])|
grepl("LICENSURE", x3[i,degree_title_col_num])|
grepl("PBC IN DIETETICS", x3[i,degree_title_col_num])|
grepl("CRIMINAL JUSTICE", x3[i,degree_title_col_num])|
grepl("FIRE FIGHTER TECHNOLOGY", x3[i,degree_title_col_num])|
grepl("AIDED DESIGN", x3[i,degree_title_col_num])|
grepl("MAJOR CERT", x3[i,degree_title_col_num])){
x3[i,dim(x3)[2]] = "C"
} else if (grepl("MAST", x3[i,degree_title_col_num])|
grepl("MSW", x3[i,degree_title_col_num])|
grepl("MBA", x3[i,degree_title_col_num])|
grepl("M S", x3[i,degree_title_col_num])|
grepl("MS", x3[i,degree_title_col_num])|
grepl("M.A", x3[i,degree_title_col_num])|
grepl("MAE", x3[i,degree_title_col_num])| # MASTER OF COUNSELING
grepl("CONCENTRATION", x3[i,degree_title_col_num])|
grepl("M. S. ", x3[i,degree_title_col_num])
){
x3[i,dim(x3)[2]] = "M"
} else if (grepl("DOCT", x3[i,degree_title_col_num])|
grepl("JD", x3[i,degree_title_col_num])|
grepl("PSYD", x3[i,degree_title_col_num])|
grepl("DR", x3[i,degree_title_col_num])|
grepl("DC", x3[i,degree_title_col_num]) # Doctor of Chiropractic
){
x3[i,dim(x3)[2]] = "D"
}
}
# highest degree obtained
xx <- x3 %>%
filter(degree_level!= "B_MAJOR/MINOR" ) %>%
mutate(degree_value =case_when(degree_level == "C"~1,
degree_level == "A"~2,
degree_level == "B"~3,
degree_level == "M"~4,
degree_level == "D"~5)) %>%
arrange(RequesterReturnField, desc(degree_value))
id <-NULL
df <- xx
for (i in 1:nrow(df)-1){
j<-i+1
if(identical(df$RequesterReturnField[i], df$RequesterReturnField[j])==TRUE){
id[j]<-id[i]+1
} else {
id[j] <-1
}
}
ds_final <- cbind(id, df) %>%
filter(id==1) %>%
select(1:dim(df)[2]+1) %>%
select(RequesterReturnField, degree_level) %>%
rename(highest_degree = degree_level)
# Organize degrees/non-degrees: Certificate, A, B, M, D
x4 <- x3 %>%
select(RequesterReturnField, degree_level) %>%
distinct()
# spread data
x5 <- cbind(x4, value = "Y")
x6 <- spread(x5, degree_level, value=value) %>%
select(RequesterReturnField, C, A, B, M, D) %>%
rename(Certificate = C, Adegree = A, Bdegree=B, Mdegree=M, Ddegree=D)
# spread data
x5 <- cbind(x4, value = "Y")
x5
x6 <- spread(x5, degree_level, value=value)
x6
# join with original unique students
base <- x %>% select(RequesterReturnField) %>%
distinct()
join1 <- left_join(base, x6,
by = "RequesterReturnField")
join1
join2 <- left_join(join1, ds_final, by ="RequesterReturnField")
join2
join2 <- left_join(join1, ds_final, by ="RequesterReturnField")
join2
head(join2)
# the second time you make changes to the document, you just need to set
# to the right project,
# run compiling the documents.
# 2-configure your git ####
library(usethis)
use_git_config(user.name = "Bo Klauth", user.email="bklauth@gmail.com")
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/NSC", force=FALSE)
# set project directory
# This is to make sure we work in the right project folder
proj_set(""C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/NSC", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/NSC")
document()
# use load_all() to view documentations
devtools::load_all()
# Step 5: Add vignette (optional)
# Run this function will create a RMardown file for writing the how to document.
#use_vignette("How to Use MplusCodeGen")
# Step 6: Test
# Step 7: Install and check documentation
setwd("..") # moving the directory one folder backward
setwd("C:/Users/shh6304/Documents")
# After you install, you will be able to see the updated version.
devtools::install("NSC")
library(NSC)
?NSC
?your_college
?one_from_Graduated
?highest_degree
?table_fp2
?prepare_data
# to install from Github
library(devtools) # for creating an R package
mytoken <- "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"
install_github("Boklauth/NSC", auth_token = mytoken)
auth_token
?install_github
# compile a package
#setwd("..")
getwd()
devtools::build(pkg = "C:/Users/shh6304/Documents/NSC",
path = NULL,
binary = FALSE,
vignettes = FALSE)
# first time setting up the R package
# how to make a package
# source:
# https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# https://www.youtube.com/watch?v=9PyQlbAEujY
#
# Read another book by Hadley Wickham: https://r-pkgs.org/index.html
# Step 1: install the tools ####
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# Step 2 : create a folder ####
# create the Framework for the package
setwd("C:/Users/shh6304/Documents")
## 1-Create a folder ####
create("NSC")
# Overwrite Description: No
# Overwrite NAMESPACE: Yes
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/NSC", force=FALSE)
# If you have created the folder already, then will ask you if you want to overwrite files:
# Description: Yes --> Whatever was added will be disappeared.
# So, said no to overwriting this file if you want to keep the contents.
# NAMESPACE: Yes --> Whatever was added will be disappeared.
# Overwriting this would be fine since Roxigen2 will add everythig you need.
# Rproj: Yes --> Not sure.
# Step 3: Create the function and upload ####
## Copy and Paste the function ####
# create a .R file and saved it with the function name in the R sub folder of the "MplusCodeGen" project.
# This folder should be in Documents
# Step 4: Create Documentation ####
## 4.1 Add some description to the function file ####
# Add some description that looks like below to the function file.
## start ####
#'A Function for Creating an Mplus Script for Generating a Measurement Model Data Set
#'
#' This package contains the MplusCodeGen function,
#' which creates an Mplus script for generating ordered categorical data for a measurement model (MS).
#' The script is saved in a specified location with an extension .inp.
#' You can open the script in Mplus or use Mplus Automation package to run for creating data
#' through the Mplus script.
#' @return MplusCodeGen will return an Mplus script for data generation for a
#'         measurement model with ordered categorical variables. It will also create an ".inp" file in your specified
#'         directory. This file be executed in Mplus or in R using an appropriate command or function
#'         (e.g., MplusAutomation::runModels()).
#' @export
#' @examples
#' data.3F <- MplusCodeGen(
#'  # list your model in increasing order
#'  model <- list(c(1,2,3,4), #factor 1
#'                c(5,6,7,8), # factor 2
#'                c(9,10, 11, 12)
#'                ), # factor 3 and so on
#'  eloadval <- NULL,
#'  vloadings <- c(0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.6, 0.6, 0.6, 0.6), # a vector of factor loadings
#'  thresholds <- c(-1.282,	0,	1.282,	1.572), # threshold values per item for 1,2,3,4
#'  factor.cor <- NULL,# factor correlation
#'  vfactor.cor<- c(0.31, 0.32, 0.33), # length(vfactor.cor)
#'  N <- 100, # sample size
#'  R <- 5,# n of replications
#'  seed_mplus <- 4567,# seed number for Mplus
#'  naming_files <- 'data4_rep*.dat;',
#'  file_dir <- "C:/Users/shh6304/Google Drive/CLASSES/0000_Dissertation/Resources for Mplus automation using R/bo_dis/4_mplus files",
#'  file_name <-"generate_data4.inp"
#' )
#' @references
#' \insertRef{DiStefano2014}{MplusCodeGen}
#'
#' \insertRef{Li2014}{MplusCodeGen}
#'
#' \insertRef{Forero2009}{MplusCodeGen}
#'
#' \insertRef{Muthen2017}{MplusCodeGen}
#' @seealso [Oracle()], [dbConnect()]
## end ####
### Create references. ####
# Create a subdirectory 'inst' and create a file named "REFERENCES.bib" in the folder.
dir.create("C:/Users/shh6304/Documents/NSC/inst")
# Insert bibTex references.
# I should find a function to create a folder.
# note that inserting reference needs a reference key and the current package.
# can use "#' @" to see more options to insert in the Documentation file.
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/NSC", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/NSC")
# run the function below. #
setwd("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/NSC")
document()
