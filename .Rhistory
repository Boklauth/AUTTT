k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma900
unscaled_3f_gamma1200
sizes[i]
sizes <- c(300, 600,1200)
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma600
unscaled_3f_gamma1200
unscaled_3f_gamma300
sizes <- c(300, 600,1200)
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, sizes[i])
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma600
unscaled_3f_gamma1200
# data, unscaled
unscaled_3f_gamma300
library(NSC)
?NSC
p(0.25)
pnorm(0.25)
pnorm((1-0.025))
pnorm((0.025))
pnorm(0.05)
qnorm(0.025)
qnorm(0.025)
qnorm(1-0.025)
qnrom(1-0.05)
qnorm(1-0.05)
qnorm(0.025, 0, 1, lower.tail = FALSE)
qnorm(0.025, 0, 1, lower.tail = FALSE)
qnorm(0.05, 0, 1, lower.tail = FALSE)
qnorm(0.05/2, 0, 1, lower.tail = FALSE)
?Chisquare
qchisq(0.025, df=3, lower.tail=FALSE)
qchisq(0.025, df=3, lower.tail=TRUE)
qchisq(0.025, df=1, lower.tail=TRUE)
qchisq(0.025, df=1, lower.tail=FALSE)
qchisq(0.05, df=1, lower.tail=FALSE)
?t.test
qt(0.025, df=3)
qt(0.025, df=3, lower.tail=FALSE)
lambs <- runif(12, 7, 9.5)
lambs
library(AUTTT)
rm(TSK)
library(AUTTT)
to_cormatrix(lambs, ndim=3)
to_cormatrix(lambs, ndim=3)
to_cormatrix(lambs)
to_cormatrix(lambs, n_dim=3)
?AUTTT
??AUTTT
# Loadings
# turn loadings into a matrix
nvar <- length(lambs)
nvar
n_dim <- 3
df <- matrix(rep(0, nvar),
nrow = nvar, ncol = n_dim)
# turn loadings into a matrix
# declare variables
param <- lambs
nvar <- length(param)
nvar
n_dim <- 3
df <- matrix(rep(0, nvar),
nrow = nvar, ncol = n_dim)
df
model <- list(c(1,2,3,4), c(5,6,7,8), c(9,10, 11, 12))
# turn loadings into a matrix
# declare variables
param <- lambs
nvar <- length(param)
length(model)
df <- matrix(rep(0, nvar),
nrow = nvar, ncol = length(model))
if (is.null(model)){
stop("To turn a vector of factor loadings into a p x m matrix, a model is needed.")
} else {
for (f in 1:length(model)) {
start_n <-   min(unlist(model[f]))
end_n <- max(unlist(model[f]))
for (j in start_n : end_n)
df[j,f] <- param[j]
}
}
df
LAMB
LAMB <- df
LAMB
model <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
param <- lambs
nvar <- length(param)
df <- matrix(rep(0, nvar),
nrow = nvar, ncol = length(model))
if (is.null(model)){
stop("To turn a vector of factor loadings into a p x m matrix, a model is needed.")
} else {
for (f in 1:length(model)) {
start_n <-   min(unlist(model[f]))
end_n <- max(unlist(model[f]))
for (j in start_n : end_n)
df[j,f] <- param[j]
}
}
LAMB <- df
LAMB
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
?to_loadingmatrix
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
library(devtools)
mytoken <- "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"
install_github("Boklauth/NSC", auth_token = mytoken)
install_github("Boklauth/AUTTT", auth_token = mytoken)
# test for to_loadingmatrix
library(AUTTT)
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
install_github("Boklauth/AUTTT", auth_token = mytoken, force=TRUE)
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken, force=TRUE)
# test for to_loadingmatrix
library(AUTTT)
?to_loadingmatrix
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
to_loadingmatrix(loading_vec = lambs, model = model)
?to_loadingmatrix
# test for to_loadingmatrix
library(AUTTT)
to_loadingmatrix(loading_vec = lambs, model = model)
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
# test for to_loadingmatrix
library(AUTTT)
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
to_loadingmatrix(loading_vec = lambs, model = model)
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
# test for to_loadingmatrix
library(AUTTT)
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
# 12 items with equal number of items per dimension, 2 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6), c(7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
# 12 items per dimension, 1 dimension
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6, 7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = model)
to_loadingmatrix(loading_vec = lambs, model = mymodel)
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# 12 items with equal number of items per dimension, 2 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6), c(7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
git--version
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken, force=TRUE)
# test for to_loadingmatrix
library(AUTTT)
?to_loadingmatrix()
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# 12 items with equal number of items per dimension, 2 dimensions
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6), c(7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# 12 items per dimension, 1 dimension
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6, 7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# run compiling the documents.
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
# test for to_loadingmatrix
library(AUTTT)
?to_loadingmatrix()
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6), c(7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
# 12 items per dimension, 1 dimension
lambs <- runif(12, 7, 9.5)
mymodel <- list(c(1,2,3,4, 5, 6, 7, 8, 9, 10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
?apply
x <- lambs
x
H2 <- apply(x^2, MARGIN = 1, FUN = sum) # 1 indicate rows, aka rowSum()
length(x)
typeof(x)
x <- as.matrix(x)
x
H2 <- apply(x^2, MARGIN = 1, FUN = sum) # 1 indicate rows, aka rowSum()
H2
lambs
# 12 items per dimension, 1 dimension
lambs <- runif(12, 0.7, 0.95)
x <- lambs
x <- as.matrix(x)
H2 <- apply(x^2, MARGIN = 1, FUN = sum) # 1 indicate rows, aka rowSum()
H2
epsilon <- 1 - H2 # uniqueness
epsilon
epsilon_matrix <- diag(epsilon)
epsilon_matrix
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
library(AUTTT)
# Example 1
lambs <- runif(12, 7, 9.5)
x <- lambs
diag_residuals(x = lambs)
# Example 1
lambs <- runif(12, .7, .95)
x <- lambs
diag_residuals(x = lambs)
# Example 2
lambs <- runif(12, .7, .95)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
x <- lambs
diag_residuals(x = lambs)
diag_residuals(x = lambs)
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# install from Git
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
f_cor <- c(0.3, 0.5, 0.6) # interfactor correlation vector
# test for to_loadingmatrix
library(AUTTT)
?to_loadingmatrix()
# 12 items with unequal number of items per dimension, 3 dimensions
lambs <- runif(12, 0.7, 0.95)
mymodel <- list(c(1,2,3,4), c(5,6,7), c(8, 9,10, 11, 12))
to_loadingmatrix(loading_vec = lambs, model = mymodel)
my_L <- to_loadingmatrix(loading_vec = lambs, model = mymodel)
my_R <- diag_residuals(my_L)
my_R
my_L
my_R
my_L
7*7
my_L %*% t(my_L)
my_L %*% t(my_L) + my_R
my_L %*% t(my_L)
my_R
my_L %*% t(my_L) + my_R
my_L %*% t(my_L)
my_R
diag(my_R)
my_L %*% t(my_L) + diag(my_R)
LAMB<- my_L
# communality: You sum for each variable (row) across factors (columns).
H2 <- apply(LAMB^2, 1, sum) # 1 indicate rows, aka rowSum()
H2
# Error variances
# residual variance/uniqueness/error leftover from communality
# This is the error of the observed indicators that are not explained by the factors.
epsilon <- 1 - H2 # uniqueness
epsilon
epsilon_matrix <- diag(epsilon)
epsilon_matrix
# I set the range from 0.35 to 0.65
min.range <- 0.35 # f_cor min value
max.range <- 0.65 # f_cor max value
# n of interfactor correlations
f_cor <- runif(3, min.range, max.range)
# assign latent mean
f_mean <- c(-0.2, 0, 0.1)
# assign sd of the latent factors
# assume these values below
f_sd <- c(0.9, 0.95, 0.98)
?to_cormatrix
?to_covmatrix
to_covmatrix(cor_vec=f_cor, sd_vec = f_sd)
?to_cormatrix
to_covmatrix(cor_vec=to_cormatrix(cor_vec=f_cor, n_dim =3),
sd_vec = f_sd)
to_cormatrix(cor_vec=f_cor, n_dim =3)
to_covmatrix(cor_vec=to_cormatrix(cor_vec=f_cor, n_dim =3),
sd_vec = f_sd)
?to_covmatrix
to_covmatrix(cor_matrix = =to_cormatrix(cor_vec=f_cor, n_dim =3),
sd_vec = f_sd)
to_covmatrix(cor_matrix = to_cormatrix(cor_vec=f_cor, n_dim =3),
sd_vec = f_sd)
f_cov <- to_covmatrix(cor_matrix = to_cormatrix(cor_vec=f_cor, n_dim =3),
sd_vec = f_sd)
obse_cov_matrix <- LAMB %*% f_cov %*% t(LAMB) + epsilon_matrix
obse_cov_matrix
epsilon_matrix
LAMB %*% f_cov %*% t(LAMB)
LAMB %*% f_cov %*% t(LAMB) + epsilon_matrix
LAMB %*% t(LAMB)
LAMB
my_L
# communality: You sum for each variable (row) across factors (columns).
H2 <- apply(LAMB^2, 1, sum) # 1 indicate rows, aka rowSum()
H2
# Error variances
# residual variance/uniqueness/error leftover from communality
# This is the error of the observed indicators that are not explained by the factors.
epsilon <- 1 - H2 # uniqueness
epsilon_matrix <- diag(epsilon)
epsilon_matrix
LAMB %*% f_cov %*% t(LAMB)
LAMB %*% t(LAMB)
LAMB %*% t(LAMB) + epsilon_matrix
LAMB %*% t(LAMB) + epsilon_matrix
LAMB %*% f_cov %*% t(LAMB)
LAMB %*% f_cov %*% t(LAMB) + epsilon
LAMB %*% t(LAMB) + epsilon
LAMB %*% f_cov %*% t(LAMB) + epsilon
LAMB<- my_L
obse_cov_matrix
LAMB %*% t(LAMB) + epsilon
LAMB %*% f_cov %*% t(LAMB) + epsilon
LAMB %*% t(LAMB) + epsilon
obse_cov_matrix <- LAMB %*% f_cov %*% t(LAMB) + epsilon_matrix
obse_cov_matrix
LAMB %*% t(LAMB) + epsilon
LAMB %*% t(LAMB) + epsilon_matrix
epsilon_matrix
LAMB %*% t(LAMB)
LAMB
LAMB %*% t(LAMB)
LAMB %*% t(LAMB) + epsilon_matrix
LAMB %*% t(LAMB) + epsilon_matrix
epsilon_matrix
LAMB %*% t(LAMB)
