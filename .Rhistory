for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(main_dir2, "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
getwd()
unlink(x="C:/Users/shh6304/Desktop/test6", recursive = TRUE)
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without error.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
# folders
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
print(folders[i])
}
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
message("Creating Mplus scripts in: ")
print(folders[i])
}
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
message(paste0("Loading data model from: ", folders[i]))
message("Creating Mplus scripts in: ")
print(folders[i])
}
main_dir2
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
}
View(study_cell)
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
for (i in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("MLR",
"ML_probit",
"WLSMV_delta",
"ULSMV_delta"),
rep = i,
type_montecarlo = FALSE,
run_files = FALSE
)
}
}
unlink(x="C:/Users/shh6304/Desktop/test6", recursive = TRUE)
# The best location is 'Desktop'.
# Mplus allows only upto 90 characters for directory.
# Create a director
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without error.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
# folders
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
## 3 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for(i in 1:length(folders)){
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("MLR",
"ML_probit",
"WLSMV_delta",
"ULSMV_delta"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE
)
}
}
library(MplusAutomation)
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
load(paste0(main_dir2, "/folders.Rdata"))
for(i in 1:length(folders)){
print(folders[i])
}
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
start_time <- Sys.time()
print(paste0("Start time: ", time1))
for(i in 1:length(folders)){
# message
message(paste0("Analyzing condition: ", folders[i]))
time1 <- Sys.time()
print(paste0("time1: ", time1))
# run mplus files
runModels(target=paste0(main_dir2, "/", folders[i], "/ULSMV_delta"))
# message and meta data
message(paste0("Finished analzying condition: ", folders[i]))
time2 <- Sys.time()
print(paste0("time2: ", time2))
print(time2-time1)
}
end_time <- time2
total_duration <- end_time - start_time
print(paste0("Total time: ", total_duration))
print(time2-time1)
print(gsub("Time difference of", "", time2-time1))
message(paste0("Total duration for the condition: ",
gsub("Time difference of", "", time2-time1)))
message(paste0("Total duration for the condition: ",
gsub("Time difference of", "", time2-time1),
"seconds"))
message(paste0("Total duration for the condition: ",
gsub("Time difference of", "", time2-time1),
" seconds"))
time2-time1
message(paste0("Total duration for the condition: ",
gsub("Time difference of", "", time2-time1),
" sec"))
message(paste0("Total duration for the condition: ",
round(gsub("Time difference of", "", time2-time1),1),
" sec"))
message(paste0("Total duration for the condition: ",
round(as.numeric(gsub("Time difference of", "", time2-time1)),1),
" sec"))
print(paste0("Total time: ", total_duration))
total_duration
message(paste0("Total duration for the condition: ")
message(time2-time1)
,
round(as.numeric(gsub("Time difference of", "", time2-time1)),1),
" sec"))
message(paste0("Total duration for the condition: ")
print(time2-time1)
,
round(as.numeric(gsub("Time difference of", "", time2-time1)),1),
" sec"))
message("Total duration for the condition: ")
print(time2-time1)
message(time2-time1)
print(time2-time1)
message(total_duration)
print(paste0("Total time: ", total_duration))
total_duration
print(total_duration)
message("Total duration: ")
print(total_duration)
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
start_time <- Sys.time()
print(paste0("Start time: ", time1))
for(i in 1:length(folders)){
# message
message(paste0("Analyzing condition: ", folders[i]))
time1 <- Sys.time()
print(paste0("time1: ", time1))
# run mplus files
runModels(target=paste0(main_dir2, "/", folders[i], "/ULSMV_delta"))
# message and meta data
message(paste0("Finished analzying condition: ", folders[i]))
time2 <- Sys.time()
print(paste0("time2: ", time2))
message("Total duration for the condition: ")
print(time2-time1)
}
end_time <- time2
message("Total duration: ")
print(total_duration)
print(end_time - start_time)
3*500
3*500/60
print(end_time - start_time)
gsub("Time difference of ", "", print(end_time - start_time))
gsub("difference of ", "", print(end_time - start_time))
gsub("difference of ", "", print(end_time - start_time))
gsub("difference of ", "", end_time - start_time)
gsub("", "", end_time - start_time)
gsub("", " ", end_time - start_time)
gsub(" ", "", end_time - start_time)
print(end_time - start_time)
nconditions <- 24
start_condition <- 1
end_condition <- 24
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
start_time <- Sys.time()
print(paste0("Start time: ", time1))
for(i in start_condition:end_condition){
# message
message(paste0("Analyzing condition: ", folders[i]))
time1 <- Sys.time()
print(paste0("time1: ", time1))
# run mplus files
runModels(target=paste0(main_dir2, "/", folders[i], "/ULSMV_delta"))
# message and meta data
message(paste0("Finished analzying condition: ", folders[i]))
time2 <- Sys.time()
print(paste0("time2: ", time2))
message("Total duration for the condition: ")
print(time2-time1)
}
?gather_mplus_output
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
load(paste0(main_dir2, "/folders.Rdata"))
cell_folders <- folders
est_folder <- c("ULSMV_delta")
cell_prefix <- "U"
ulsmv_est <- gather_mplus_output(nfolders = length(cell_folders),
nreps = 5,
cell_prefix = "U")
# Description
# In each cell, there are three folders: ULSMV_delta, WLSMV_delta, and ML_logit
# Each is for each estimator.
# In each folder, there are 500 output files.
# So, the code will calculate RB for each item in the cell.
# Then, it will iterate for all cells.
# ULSMV ####
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
load(paste0(main_dir2, "/folders.Rdata"))
cell_folders <- folders
ulsmv_est <- gather_mplus_output(main_dir = main_dir2,
cell_folders = cell_folders,
est_folder = "ULSMV_delta",
cell_prefix = "U",
nreps = 5,
methods = "gather")
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/AUTTT")
document()
