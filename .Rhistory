unlink(x="C:/Users/shh6304/Desktop/test", recursive = TRUE)
# The best location is 'Desktop'.
# Mplus allows only upto 90 characters for directory.
main_dir2 <- "C:/Users/shh6304/Desktop/test"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
nReps <- 5
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
## 2.2 Output data validation ####
# study_cell$res_prob
# study_cell$avg_res_prob
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.3 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
## 2.4 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for (i in 1:nReps){
mplus_montecarlo_analysis_grm(model_object = study_cell,
# file_dir = getwd(),
estimators = c("ML_probit", "WLSMV_delta", "ULSMV_delta"),
rep = i,
type_montecarlo = FALSE,
run_files = FALSE
)
}
# mplus_montecarlo_analysis_grm(model_object = study_cell,
#                            # file_dir = getwd(),
#                            estimators = c("ML_probit",
#                                           "WLSMV_delta",
#                                           "ULSMV_delta"),
#                            rep = nReps,
#                            type_montecarlo = TRUE,
#                            run_files = FALSE)
# end content
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without errors.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
unlink(x="C:/Users/shh6304/Desktop/test", recursive = TRUE)
# The best location is 'Desktop'.
# Mplus allows only upto 90 characters for directory.
main_dir2 <- "C:/Users/shh6304/Desktop/test"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
nReps <- 5
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
## 2.2 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.3 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
## 2.4 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for (i in 1:nReps){
mplus_montecarlo_analysis_grm(model_object = study_cell,
# file_dir = getwd(),
estimators = c("ML_probit", "WLSMV_delta", "ULSMV_delta"),
rep = i,
type_montecarlo = FALSE,
run_files = FALSE
)
}
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without errors.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
theta_index
# Analyze data by running MPlus scripts using MplusAutomation package
# Read Vignette here:
# https://cran.r-project.org/web/packages/MplusAutomation/vignettes/vignette.html
library(MplusAutomation)
main_dir2 <- "C:/Users/shh6304/Desktop/test"
load(paste0(main_dir2, "/folders.Rdata"))
for(i in 1:length(folders)){
print(folders[i])
}
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
print(paste0("Start time: ", Sys.time()))
for(i in 1:length(folders)){
runModels(target=paste0(main_dir2, "/", folders[i], "/ULSMV_delta"))
}
print(paste0("End time: ", Sys.time()))
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
time1 <- Sys.time()
print(paste0("Start time: ", time1))
time2 <- Sys.time()
print(paste0("End time: ", time2))
print("Duration: ", time2-time1)
print("Duration: ", time2-time1)
time2-time1
print(time2-time1)
# WLSMV ####
# Run models in the folder (/ML_probit or /ULSMV_delta or /WLSMV_delta)
time1 <- Sys.time()
print(paste0("Start time: ", time1))
for(i in 1:length(folders)){
runModels(target=paste0(main_dir2, "/", folders[i], "/WLSMV_delta"))
}
time2 <- Sys.time()
print(paste0("End time: ", time2))
print(time2-time1)
# read estimates
# Read output from Mplus files ####
library(MplusAutomation)
library(tidyverse)
main_dir2 <- "C:/Users/shh6304/Desktop/test"
load(paste0(main_dir2, "/folders.Rdata"))
cell_folders <- folders
est_folders <- c("ULSMV_delta")
cell_prefix <- "U"
# 1-Read Mplus output for all cells for ONE estimator to R ####
for(est_index in 1:length(est_folders)){
for(cfolder_index in 1:length(cell_folders)){
cell_name <- paste0(cell_prefix, cfolder_index)
message("Reading output in cell name: ", cell_name)
message("Start Time: ", Sys.time())
assign(cell_name,
readModels(paste0(main_dir2, "/", cell_folders[cfolder_index], "/", est_folders[est_index]),
recursive=FALSE, what = "all", quiet = FALSE))
message("End Time: ", Sys.time())
} # end iterations for cell folders
} # end iterations for estimators
ulsmv_est <- gather_mplus_output(nfolders = length(cell_folders),
nreps = 5,
cell_prefix = "U")
ulsmv_est
main_dir2 <- "C:/Users/shh6304/Desktop/test"
load(paste0(main_dir2, "/folders.Rdata"))
cell_folders <- folders
est_folders <- c("WLSMV_delta")
cell_prefix <- "W"
# 1-Read Mplus output for all cells for ONE estimator to R ####
for(est_index in 1:length(est_folders)){
for(cfolder_index in 1:length(cell_folders)){
cell_name <- paste0(cell_prefix, cfolder_index)
message("Reading output in cell name: ", cell_name)
message("Start Time: ", Sys.time())
assign(cell_name,
readModels(paste0(main_dir2, "/", cell_folders[cfolder_index], "/", est_folders[est_index]),
recursive=FALSE, what = "all", quiet = FALSE))
message("End Time: ", Sys.time())
} # end iterations for cell folders
} # end iterations for estimators
wlsmv_est <- gather_mplus_output(nfolders = length(cell_folders),
nreps = 5,
cell_prefix = "W")
wlsmv_est
# Combine all outputs
study_est <- rbind(ulsmv_est, wlsmv_est)
nrow(study_est)
View(wlsmv_est)
nrow(study_est)
27360*2
View(wlsmv_est)
View(wlsmv_est)
# Combine all outputs
study_est <- rbind(ulsmv_est, wlsmv_est) %>%
filter(paramHeader == "F1.BY"|paramHeader == "F2.BY"|paramHeader == "F3.BY")
# Combine all outputs
study_est <- rbind(ulsmv_est, wlsmv_est) %>%
filter(paramHeader == "F1.BY"|paramHeader == "F2.BY"|paramHeader == "F3.BY")
# Combine all outputs
study_est <- rbind(ulsmv_est, wlsmv_est) %>%
filter(paramHeader == "F1.BY"|paramHeader == "F2.BY"|paramHeader == "F3.BY")
nrow(study_est)
View(study_est)
# Split into main effects
study_est$folder
# Split into main effects
strsplit(study_est$folder, "_")
# Split into main effects
as.data.frame(strsplit(study_est$folder, "_"))
# Split into main effects
strsplit(study_est$folder, "_")
# Split into main effects
strsplit(study_est$folder, "_")[1]
# Split into main effects
strsplit(study_est$folder, "_")[1,1]
# Split into main effects
strsplit(study_est$folder, "_")[1][1]
# Split into main effects
strsplit(study_est$folder, "_")[1][2]
# Split into main effects
folders
strsplit(folders, "_")[1]
str_split_fixed(folders, "_", 5)
main_effects <- str_split_fixed(folders, "_", 5)
main_effects
main_effects <- gsub('"', '', str_split_fixed(folders, "_", 5))
main_effects
study_est
main_effects
?str_split_fixed
str_split_fixed(folders, "_", 5, simplify=TRUE)
main_effects <- gsub('"', '', str_split_fixed(folders, "_", 5))
main_effects
main_effects <- gsub('"', ' ', str_split_fixed(folders, "_", 5))
main_effects
main_effects <- gsub('\"', ' ', str_split_fixed(folders, "_", 5))
main_effects
main_effects <- as.characer(gsub('\"', ' ', str_split_fixed(folders, "_", 5)))
main_effects <- as.character(gsub('\"', ' ', str_split_fixed(folders, "_", 5)))
main_effects
main_effects <- gsub('/"', ' ', str_split_fixed(folders, "_", 5))
main_effects
str_split_fixed(folders, "_", 5)
main_effects <- str_split_fixed(folders, "_", 5)
main_effects
main_effects <- gsub('"', '', main_effects)
main_effects
main_effects[1,1]
study_est[1,1]
study_est
main_effects <- as.data.frame(str_split_fixed(folders, "_", 5))
main_effects
main_effects[1,1]
head(study_est)
main_effects
names(main_effects) <- c("uid", "sample", "theta_dis", "item_dis")
names(main_effects)
main_effects
names(main_effects) <- c("uid", "sample", "theta_dis", "loadings", "item_dis")
main_effects
main_effects2 <- cbind(folders, main_effects)
main_effects2
# join study_est and main_effect2
mplus_output <- study_est
study_est
main_effects2
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder", "folders"))
study_est
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folders", "folders"))
head(study_est)
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder"="folders"))
mplus_output
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder"="folders")) %>%
select(folder, rep, uid, sample, theta_dis, loadings, item_dis,
estimator, param, est, se, est_se, pval)
mplus_output
# Load population factor loadings
load(paste0(main_dir, "/output/itempara/loadings1.Rdata"))
load(paste0(main_dir, "/output/itempara/loadings2.Rdata"))
loadings_mod <- cbind("loadings" = "LLO", loadings1)
loadings_mod
View(loadings_mod)
loadings_temp1 <- cbind("loadings" = "LLO", loadings1)
loadings_temp2 <- cbind("loadings" = "LHI", loadings2)
loadings_mod <- rbind(loadings_temp1, loadings_temp2)
loadings_mod
loadings_temp1 <- cbind("loadings" = "LLO", pop_loadings = loadings1)
loadings_temp2 <- cbind("loadings" = "LHI", pop_loadings = loadings2)
loadings_mod <- rbind(loadings_temp1, loadings_temp2)
loadings_mod
loadings_temp1 <- cbind(loadings = "LLO", pop_loadings = loadings1)
loadings_temp2 <- cbind(loadings = "LHI", pop_loadings = loadings2)
loadings_mod <- rbind(loadings_temp1, loadings_temp2)
loadings_mod
loadings_mod <- rbind(loadings_temp1, as.numeric(loadings_temp2))
as.numeric(loadings_temp2)
loadings_temp1 <- cbind(loadings = "LLO", pop_loadings = loadings1)
loadings_temp2 <- cbind(loadings = "LHI", pop_loadings = loadings2)
loadings_mod <- rbind(loadings_temp1, as.numeric(loadings_temp2))
loadings_temp1 <- cbind(loadings = "LLO", loadings1)
loadings_temp1
loadings_temp1 <- as.data.frame(cbind(loadings = "LLO", pop_loadings = loadings1))
loadings_temp1
loadings_mod <- as.data.frame(rbind(loadings_temp1, loadings_temp2))
loadings_mod
View(loadings_mod)
loadings_mod$loadings <- as.numeric(loadings_mod$loadings)
loadings_mod$loadings
loadings_temp1 <- cbind(loadings = "LLO", pop_loadings = loadings1)
loadings_temp2 <- cbind(loadings = "LHI", pop_loadings = loadings2)
loadings_mod <- as.data.frame(rbind(loadings_temp1, loadings_temp2))
loadings_mod
transform(loadings_mod, loadings = as.numeric(loadings))
loadings_mod <- as.data.frame(rbind(loadings_temp1, loadings_temp2))
transform(loadings_mod, loadings = as.numeric(pop_loadings))
# Load population factor loadings
load(paste0(main_dir, "/output/itempara/loadings1.Rdata"))
load(paste0(main_dir, "/output/itempara/loadings2.Rdata"))
loadings_temp1 <- cbind(loadings = "LLO", pop_loadings = loadings1)
loadings_temp2 <- cbind(loadings = "LHI", pop_loadings = loadings2)
loadings_mod <- as.data.frame(rbind(loadings_temp1, loadings_temp2))
transform(loadings_mod, loadings = as.numeric(pop_loadings))
transform(loadings_mod, pop_loadings = as.numeric(pop_loadings))
View(loadings_mod)
loadings_mod <- transform(loadings_mod, pop_loadings = as.numeric(pop_loadings))
View(loadings_mod)
sapply(loadings_mod, mode)
loadings_mod
study_est
mplus_output
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder"="folders")) %>%
left_join(., loadings_mod, by = c("loadings"="loadings")) %>%
select(folder, rep, uid, sample, theta_dis, loadings, item_dis,
estimator, pop_loadings, param, est, se, est_se, pval)
head(mplus_output)
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder"="folders")) %>%
select(folder, rep, uid, sample, theta_dis, loadings, item_dis,
estimator, pop_loadings, param, est, se, est_se, pval)
# join study_est and main_effect2
mplus_output <- study_est %>%
left_join(., main_effects2, by =c("folder"="folders")) %>%
select(folder, rep, uid, sample, theta_dis, loadings, item_dis,
estimator, param, est, se, est_se, pval)
head(mplus_output)
for(i in 1:21){
item <- paste0("Y", i)
}
item
item <- paste0("Y", 1:21)
item
loadings_temp1 <- cbind(loadings = "LLO", item, pop_loadings = loadings1)
loadings_temp1
# combine loading magnitude, item, loading values
loadings_temp1 <- cbind(loadings = "LLO", item, pop_loadings = loadings1)
loadings_temp2 <- cbind(loadings = "LHI", item, pop_loadings = loadings2)
loadings_mod <- as.data.frame(rbind(loadings_temp1, loadings_temp2))
# transform to numeric
loadings_mod <- transform(loadings_mod, pop_loadings = as.numeric(pop_loadings))
sapply(loadings_mod, mode)
head(loadings_mod)
?left_join
head(mplus_output)
all_output <- mplus_output %>%
left_join(., loadings_mod, by=("loadings"="loadings", "para"="item"))
all_output <- mplus_output %>%
left_join(., loadings_mod, by = c("loadings" = "loadings", "para"="item"))
all_output <- mplus_output %>%
left_join(., loadings_mod, by = c("loadings" = "loadings", "param"="item"))
head(all_output)
View(all_output)
5040+24*(500-5)
5040+24*(500-5)*21
