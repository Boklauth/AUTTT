hist(x, prob=TRUE)
hist(x2, prob=TRUE)
hist(x3, prob=TRUE)
c(skewness(x), kurtosis(x))
c(skewness(x2), kurtosis(x2))
c(skewness(x3), kurtosis(x3))
?dgamma
mydata = draw.d.variate.uniform(no.row = 300,
d = 3,
cov.mat = f_cor_matrix) # actually use correlation matrix, not covariance matrix
cor(mydata)
D
cor_vec <- c(0.3, 0.4, 0.5, 0.6)
sd_vec <- c(0.95, 0.98, 1.1, 0.99)
n_dim <- 4
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_cell
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=length(model),
ncol=length(model))
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
f_cor_matrix
id <- 1
id <- NULL
id <- 1
for (i in 1:(length(model)-1)){
for (j in (i+1):length(model)){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
f_cor_cell
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
f_cor_matrix
bivar_cor <- n_dim*(n_dim -1)/2
bivar_cor
n_dim <- 3
bivar_cor <- n_dim*(n_dim -1)/2
bivar_cor
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
bivar_cor
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec < bivar_cor)){
stop(paste0("You need ", bivar_cor, " correlations for correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
cor_vec <- c(0.3, 0.4, 0.5, 0.6. 0.42, 0.52)
sd_vec <- c(0.95, 0.98, 1.1, 0.99)
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec < bivar_cor)){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
f_cor_matrix
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
cor_vec <- c(0.3, 0.4, 0.5)
sd_vec <- c(0.95, 0.98, 1.1)
n_dim <- 3
to_3x3cormatrix <- function(cor_vec,
sd_vec,
n_dim){
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec < bivar_cor)){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
}
f_cor_matrix
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec < bivar_cor)){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
cor_vec
bivar_cor
length(cor_vec)
if (length(cor_vec) < bivar_cor)){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec < bivar_cor)){
stop(paste0("There are more correlation values than needed."))
}
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
f_cor_cell
f_cor_matrix
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
f_cor_matrix
return(f_cor_matrix)
to_3x3cormatrix <- function(cor_vec,
sd_vec,
n_dim){
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
return(f_cor_matrix)
}
cor_vec <- c(0.3, 0.4, 0.5)
sd_vec <- c(0.95, 0.98, 1.1)
n_dim <- 3
to_3x3cormatrix(cor_vec = cor_vec,
sd_vec = sd_vec,
n_dim = 3)
to_3x3cormatrix <- function(cor_vec, n_dim){
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
return(f_cor_matrix)
} # end function
to_3x3cormatrix(cor_vec = cor_vec,
n_dim = 3)
to_3x3cormatrix(cor_vec = cor_vec,
sd_vec = sd_vec
n_dim = 3)
cor_vec <- c(0.3, 0.4, 0.5, 0.6. 0.42, 0.52)
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
n_dim
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
(length(cor_vec) < bivar_cor)
bivar_cor
length(cor_vec)
cor_vec <- c(0.3, 0.4, 0.5, 0.6. 0.42, 0.52)
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
cor_vec <- c(0.3, 0.4, 0.5, 0.6. 0.42, 0.52)
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
length(cor_vec)
cor_vec <- c(0.3, 0.4, 0.5, 0.6. 0.42, 0.52)
cor_vec
cor_vec <- c(0.3, 0.4, 0.5, 0.6, 0.42, 0.52)
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <-matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
return(f_cor_matrix)
f_cor_matrix
cor_vec <- c(0.3, 0.4, 0.5, 0.6, 0.42, 0.52)
n_dim <- 4
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_cell
f_cor_matrix <- matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
f_cor_matrix
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- f_cor[id]
f_cor_matrix[j,i] <- f_cor[id]
id <- id+1
}
}
f_cor_matrix
f_cor
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- cor_vec[id]
f_cor_matrix[j,i] <- cor_vec[id]
id <- id+1
}
}
f_cor_matrix
to_cormatrix <- function(cor_vec, n_dim){
bivar_cor <- n_dim*(n_dim -1)/2
if (length(cor_vec) < bivar_cor){
stop(paste0("You need ", bivar_cor, " correlations for the correlation vector, cor_vec"))
} else if (length(cor_vec) > bivar_cor){
stop(paste0("There are more correlation values than needed."))
}
# Arrange factor correlation values into correlation matrix
f_cor_cell <- n_dim*n_dim
f_cor_matrix <- matrix(rep(1, f_cor_cell),
nrow=n_dim,
ncol=n_dim)
id <- 1
for (i in 1:(n_dim-1)){
for (j in (i+1):n_dim){
f_cor_matrix[i,j] <- cor_vec[id]
f_cor_matrix[j,i] <- cor_vec[id]
id <- id+1
}
}
f_cor_matrix
return(f_cor_matrix)
} # end function
to_cormatrix(cor_vec = cor_ve, n_dim=4)
to_cormatrix(cor_vec = cor_vec, n_dim=4)
sd_vec
diag(sd_vec)
to_covmatrix <- function(cor_matrix, sd_vec){
sd_matrix <- diag(sd_vec)
cov_matrix <- sd_matrix %*% cor_matrix %*% sd_matrix
return(cov_matrix)
}
to_covmatrix <- function(cor_matrix, sd_vec){
sd_matrix <- diag(sd_vec)
cov_matrix <- sd_matrix %*% cor_matrix %*% sd_matrix
return(cov_matrix)
}
mycormat <- to_cormatrix(cor_vec = c(0.3, 0.5, 0.6), n_dim=3)
to_covmatrix(mycormat, sd_vec = c(0.95, 0.98, 1.1))
devtools::install("AUTTT")
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
# Step 7: Install and check documentation
setwd("..") # moving the directory one folder backward
setwd("C:/Users/shh6304/Documents")
library(AUTTT)
?TSK
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
install_github("Boklauth/AUTTT")
install_github("Boklauth/AUTTT")
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
install_github("Boklauth/AUTTT")
library(AUTTT)
?TSK
?to_cormatrix
# set up interfactor correlation
n_dim <- 3
# convert the cor. vector to cor.matrix
library(AUTTT)
to_cormatrix(cor_vec = f_cor, n_dim=3)
my_ifc_input <- to_cormatrix(cor_vec = f_cor, n_dim=3)
my_ifc_input
my_cormat_input <- to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
my_covmat_input
cov2cor(my_covmat_input)
cov2cor(my_covmat_input)
my_cormat_input
f_cor <- c(0.3, 0.5, 0.6) # interfactor correlation vector
my_cormat_input <- to_cormatrix(cor_vec = f_cor, n_dim=3)
my_cormat_input
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
my_covmat_input
cov2cor(my_covmat_input)
# install.packages("MultiRNG")
library(MultiRNG)
#For three sample sizes:
sizes <- c(300, 600, 1200)
#For three sample sizes:
sizes <- c(300, 600, 1200)
for (i in 1:3){
paste0("N", i) = draw.d.variate.uniform(no.row = sizes[i],
d = 3,
cov.mat = my_cormat_input)
}
#For three sample sizes:
sizes <- c(300, 600, 1200)
for (i in 1:3){
mythetas = draw.d.variate.uniform(no.row = sizes[i],
d = 3,
cov.mat = my_cormat_input)
assign(paste0("N", i), mythetas)
}
paste0("N", i)
N1
cor(N1)
cor(N2)
cor(N3)
apply(N1, FUN = mean())
apply(N1, FUN = mean
apply(N1, FUN = mean)
sapply(N1, FUN = mean)
dim(N1)
dim(N2)
dim(N3)
covr(N1)
cov(N1)
cov(N2)
cov(N1) - cov(N2)
cov(N1) - cov(N3)
cov(N2) - cov(N3)
cov(N2)
sd(N2)
sqrt(diag(cov(N2)))
?apply
sapply(N1, 1, FUN = mean)
apply(N1, 1, FUN = mean)
apply(N1, 1:3, FUN = mean)
apply(N1, 1, FUN = mean)
lapply(N1, 1, FUN = mean)
summary(N1)
summary(N2)
summary(N3)
sqrt(diag(cov(N2)))
hist(N1[,1], prob=TRUE)
hist(N1[,2], prob=TRUE)
hist(N1[,3], prob=TRUE)
my_newdata <- matrix(rep(0, 300*3), nrow=300, ncol=3)
mydata <- N1
for (coli in 1:3){
Y <- runif(300, -3, 3)
mean_Y <- 0
sd_Y <- 1
my_newdata[,coli] <- mydata[,coli]*sd_Y/sd(mydata[,coli]) +
(mean_Y - mean(mydata[,coli])*sd_Y)/sd(mydata[,coli])
}
my_newdata
my_newdata <- matrix(rep(0, 300*3), nrow=300, ncol=3)
mydata <- N1
for (coli in 1:3){
Y <- runif(300, -3, 3)
mean_Y <- 0
sd_Y <- 1
my_newdata[,coli] <- mydata[,coli]*sd_Y/sd(mydata[,coli]) +
(mean_Y - mean(mydata[,coli])*sd_Y/sd(mydata[,coli]))
}
my_newdata
summary(my_newdata)
cov(my_newdata)
mean(my_newdata[,1])
mean(my_newdata[,2])
mean(my_newdata[,3])
cor(my_newdata)
