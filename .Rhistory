# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta(size = 200,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
output$scaled_ds
output
create_theta <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
paste0("ds", 1) = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
paste0("ds", 1)
create_theta <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
paste0("ds", 1) <- mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
create_theta <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
assign(paste0("ds", 1), mythetas),
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
output$scaled_ds
View(output)
output
output$scaled_ds[2]
output[2]
output[1]
create_theta <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
create_theta_mvn <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
# Get raw theta values (latent variable scores or ability scores)
output$unscaled_ds
# Get standardized theta values (mean = 0, standard deviation =1)
output$scaled_ds
my_cormat_input
create_theta_mvn <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# check: n of factor correlations ####
# iterate pair-wise factor correlations
Fcor.tb <- NULL
for (i in 1:(nFs-1)){
for (j in (i+1):nFs){
Fcor.tb <- rbind(Fcor.tb, c(i, j))
}
}
# Check: n of factor correlations given n of factors ####
# factor correlation less than 1
vfactor.cor <- ifcor_vec
for (i in 1:length(vfactor.cor)){
if(vfactor.cor[i]>=1){
stop(paste("Factor correlation values must be less than 1. Check value number", i, '.', sep=' '))
}
}
if (is.null(vfactor.cor)){
stop("A vector of vfactor.cor is needed.")
} else if (nrow(Fcor.tb)!=length(vfactor.cor)){
stop(paste("The length of factor correlation vector (vfactor.cor) must be ",
nrow(Fcor.tb), ",(", nFs, "*", (nFs-1), "/2)",
",given the number of factors:",nFs, sep=' '))
} else {
my_cormat_input = to_cormatrix(cor_vec = vfactor.cor, n_dim=3)
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
length(sd_vec)
create_theta_mvn <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
# n of dimensions
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# check: n of factor correlations ####
# iterate pair-wise factor correlations
nFs <- d
Fcor.tb <- NULL
for (i in 1:(nFs-1)){
for (j in (i+1):nFs){
Fcor.tb <- rbind(Fcor.tb, c(i, j))
}
}
# Check: n of factor correlations given n of factors ####
# factor correlation less than 1
vfactor.cor <- ifcor_vec
for (i in 1:length(vfactor.cor)){
if(vfactor.cor[i]>=1){
stop(paste("Factor correlation values must be less than 1. Check value number", i, '.', sep=' '))
}
}
if (is.null(vfactor.cor)){
stop("A vector of vfactor.cor is needed.")
} else if (nrow(Fcor.tb)!=length(vfactor.cor)){
stop(paste("The length of factor correlation vector (vfactor.cor) must be ",
nrow(Fcor.tb), ",(", nFs, "*", (nFs-1), "/2)",
",given the number of factors:",nFs, sep=' '))
} else {
my_cormat_input = to_cormatrix(cor_vec = vfactor.cor, n_dim=3)
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
output
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
rm(create_theta_mvn())
rm("create_theta_mvn")
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
create_theta_mvn <- function(size, mean_vec, sd_vec, ifcor_vec){
require(AUTTT)
# n of dimensions
d <- length(sd_vec)
if(length(sd_vec)!=length(mean_vec)){
stop("The length of mean vector must equal to the length of standard deviation vector.")
}
# check: n of factor correlations ####
# iterate pair-wise factor correlations
nFs <- d
Fcor.tb <- NULL
for (i in 1:(nFs-1)){
for (j in (i+1):nFs){
Fcor.tb <- rbind(Fcor.tb, c(i, j))
}
}
# Check: n of factor correlations given n of factors ####
# factor correlation less than 1
vfactor.cor <- ifcor_vec
for (i in 1:length(vfactor.cor)){
if(vfactor.cor[i]>=1){
stop(paste("Factor correlation values must be less than 1. Check value number", i, '.', sep=' '))
}
}
if (is.null(vfactor.cor)){
stop("A vector of vfactor.cor is needed.")
} else if (nrow(Fcor.tb)!=length(vfactor.cor)){
stop(paste("The length of factor correlation vector (vfactor.cor) must be ",
nrow(Fcor.tb), ",(", nFs, "*", (nFs-1), "/2)",
",given the number of factors:",nFs, sep=' '))
} else {
my_cormat_input = to_cormatrix(cor_vec = vfactor.cor, n_dim=3)
}
# convert interfactor cor to cov
my_covmat_input <- to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
unscaled_ds_names <- NULL
scaled_ds_names <- NULL
mythetas <- MultiRNG::draw.d.variate.normal(no.row = size,
d = n_dim,
mean.vec = mean_vec,
cov.mat = my_covmat_input)
# Assign data sets
obj <- list("unscaled_ds" = mythetas,
"scaled_ds" = scale(mythetas))
return(obj)
}
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6)
)
# Get raw theta values (latent variable scores or ability scores)
output$unscaled_ds
# Get standardized theta values (mean = 0, standard deviation =1)
output$scaled_ds
test1 <- simdata_grm(model = list(c(1,2,3,4), c(5,6,7,8), c(9,10,11,12)),
# theta_matrix = unscaled_3f_mvn300,
theta_matrix = scaled_3f_mvn300,
a = a_vec,
d = d_vec,
N = 300,
R = 50,
method = "U",
file_dir = getwd(),
file_prefix = "test1")
#test1$res_prob
probU <- test1$avg_res_prob
test1$avg_res_prob
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
rm(create_theta_mvn())
rm("create_theta_mvn")
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
create_theta_mvn()
>create_theta_mvn()
?create_theta_mvn
# n. of dimensions = 3
mean_vec <- c(-0.1, 0, 0.1) # mean vector for each dimension
sd_vec <- c(0.95, 0.98, 1.1) # sd vector for each dimension
f_cor <- c(0.3, 0.5, 0.6) # interfactor correlation vector
library(AUTTT)
output <- create_theta_mvn(size = 10,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6))
output
output <- create_theta_mvn(size = 300,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6))
theta1 <- create_theta_mvn(size = 300,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6))
theta1$scaled_ds[,1]
theta1 <- create_theta_mvn(size = 300,
mean_vec = c(-0.1, 0, 0.1),
sd_vec = c(0.95, 0.98, 1.1),
ifcor_vec = c(0.3, 0.5, 0.6))
theta1$scaled_ds
# CFA-OV parameters
set.seed(1234)
lambda <- runif(12, 0.8, 0.93) # loadings for 12 items
cat_prob2 <- c(0.04, 0.06, 0.11, 0.37, 0.42) # m. skewed prob.
temp <- TSK(n=300, res_prop = cat_prob2)
T2 <- temp$thresholds
# Convert to IRT parameters
# A vector of item discrimination
a_vec <- lambda/sqrt(1-lambda^2)
# a vector of item difficulty
nvar <- length(a_vec)
thresholds_m <- matrix(rep(T2, nvar),
nrow = nvar,
ncol=length(T2),
byrow = TRUE)
# item difficulty parameters
b_vec <- thresholds_m/lambda
# intercept parameters
d_vec <- -a_vec*b_vec
setwd("C:/Users/shh6304/Documents/My Documents/test_grm")
test1 <- simdata_grm(model = list(c(1,2,3,4), c(5,6,7,8), c(9,10,11,12)),
# theta_matrix = unscaled_3f_mvn300,
theta_matrix = scaled_3f_mvn300,
a = a_vec,
d = d_vec,
N = 300,
R = 50,
method = "U",
file_dir = getwd(),
file_prefix = "test1")
# response probabilities
test1$res_prob
# response probabilities across items and replications
test1$avg_res_prob
# 1 dimension of theta
scaled_1f_mvn300 <- theta1$scaled_ds[,1]
simdata_grm(model = list(seq(1,12)),
theta_matrix = scaled_1f_mvn300,
a = a_vec,
d = d_vec,
N = 300,
R = 5,
method = "N",
file_dir = getwd(),
file_prefix = "test1")
simdata_grm(model = list(seq(1,12)),
theta_matrix = scaled_1f_mvn300,
a = a_vec,
d = d_vec,
N = 300,
R = 5,
method = "N",
file_dir = getwd(),
file_prefix = "test1")
cat_prob2 <- c(0.4, 0.6) # m. skewed prob.
temp <- TSK(n=300, res_prop = cat_prob2)
T2 <- temp$thresholds
# Convert to IRT parameters
# A vector of item discrimination
a_vec <- lambda/sqrt(1-lambda^2)
# a vector of item difficulty
nvar <- length(a_vec)
thresholds_m <- matrix(rep(T2, nvar),
nrow = nvar,
ncol=1,
byrow = TRUE)
b_vec <- thresholds_m/lambda
# intercept parameters
d_vec <- -a_vec*b_vec
setwd("C:/Users/shh6304/Documents/My Documents/test_grm")
simdata_grm(model = list(seq(1,12)),
theta_matrix = unscaled_1f_mvn300,
a = a_vec,
d = d_vec,
N = 300,
R = 5,
method = "N",
file_dir = getwd(),
file_prefix = "test1")
d_vec
# intercept parameters
d_vec <- -a_vec*b_vec
d_vec
set.seed(1234)
lambda <- runif(12, 0.8, 0.93) # loadings for 12 items
cat_prob2 <- c(0.04, 0.06, 0.11, 0.37, 0.42) # m. skewed prob.
temp <- TSK(n=300, res_prop = cat_prob2)
T2 <- temp$thresholds
# Convert to IRT parameters
# A vector of item discrimination
a_vec <- lambda/sqrt(1-lambda^2)
# a vector of item difficulty
nvar <- length(a_vec)
thresholds_m <- matrix(rep(T2, nvar),
nrow = nvar,
ncol=length(T2),
byrow = TRUE)
# item difficulty parameters
b_vec <- thresholds_m/lambda
# intercept parameters
d_vec <- -a_vec*b_vec
d_vec
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# get project director
proj_get()
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
?simdata_grm
# use load_all() to view documentations
devtools::load_all()
?simdata_grm
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
rm("simdata_grm")
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
?simdata_grm
