# use load_all() to view documentations
devtools::load_all()
?gamma_from_normal
# install from Git
library(devtools)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
mytoken <- "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"
install_github("Boklauth/AUTTT", auth_token = mytoken)
# find the constant
library(AUTTT)
y <- seq(-3, 3, 0.01)
# plotting pdf of a gamma dist
shape <- 5
rate <- 5
par(mfrow=c(1,1))
plot(y, dgamma(y, shape=shape, rate = rate))
plot(y, dgamma(y, shape = shape, rate = rate)/dnorm(y),
ylim=c(1,6),
xlim=c(0, 3.5),
ylab = expression("f(y)/g(y)"),
xlab = "A Random Variable Y")
abline(h=4)
# Constant c = 4 is appropriate.
c <- 4
mean_vec <- c(-0.1, 0, 0.1) # mean
sd_vec <- c(0.95, 0.98, 1.1) # sd vector for each dimension
f_cor <- c(0.49, 0.74, 0.87) # correlation vector
# convert the cor. vector to cor.matrix
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
# covert correlation matrix to covariance matrix
my_covmat_input <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
seed_num <- 45679
gamma_from_normal(shape = shape,
rate = rate,
mean_vec = mean_vec,
cov_matrix = my_covmat_input,
size = 300,
c = c,
seed_num = seed_num)
# see the shape the sample
par(mfrow = c(2,2))
for (i in 1:3){
y <- sort(X[,i])
hist(y, prob=TRUE, ylim=c(0, 1))
lines(y, dgamma(y, shape = 5, scale=1/4))
}
# Mixture distribution in DeMars (2012)
library(moments)
max_iterations <- 100
fcor <- rep(NA, max_iterations)
for (i in 1:max_iterations){
print(paste0("Iteration: ", i))
# theta 1
n <- 1000
g1 <- matrix(rnorm(n*0.7, 0.384, 0.640),ncol=1)
hist(g1, prob=TRUE)
g2 <- matrix(rnorm(n*0.3, -0.896, 1.109),ncol=1)
hist(g2, prob=TRUE)
theta1 <- rbind(g1,g2)
hist(theta1, prob=TRUE)
plot(theta1, dnorm(theta1, 0, 1))
mean(theta1)
sd(theta1)
skewness(theta1)
kurtosis(theta1)-3
# theta 2
g3 <- matrix(rnorm(n*0.6, 0, 0.838), ncol=1)
g4 <- matrix(rnorm(n*0.2, -1.047, 0.592), ncol=1)
g5 <- matrix(rnorm(n*0.2, 1.047, 0.592), ncol=1)
theta2 <- rbind(g3,g4,g5)
hist(theta2, prob=TRUE)
mean(theta2)
sd(theta2)
skewness(theta2)
kurtosis(theta2)-3
fcor[i] <- cor(theta1, theta2)
print(paste("Correlation:", fcor[i]))
if (fcor[i] >= 0.4 & fcor[i] <= 0.8){
print(fcor[i])
print("Correlation replicated.")
break
}
if(i == max_iterations & (fcor[i] <0.4 | fcor[i] > 0.8)){
print("Failed to replicate correlation.")
}
}
# Using histogram to see the shape of the distribution
n <- 1000
g1 <- matrix(rnorm(n*0.7, 0.384, 0.640),ncol=1)
hist(g1, prob=TRUE)
# Using histogram to see the shape of the distribution
par(mfrow=c(1,1))
n <- 1000
g1 <- matrix(rnorm(n*0.7, 0.384, 0.640),ncol=1)
hist(g1, prob=TRUE)
g2 <- matrix(rnorm(n*0.3, -0.896, 1.109),ncol=1)
hist(g2, prob=TRUE)
theta1 <- rbind(g1,g2)
moments::skewness(theta1)
moments::kurtosis(theta1)
# Create theta from mixture distribution
size <- 300
g1 <- matrix(rnorm(size*0.7, 0.384, 0.640),ncol=1)
g1
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
my_cormat_input
my_covmat_input
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.7,
d = n_dim,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = my_covmat_input)
G1
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.3,
d = n_dim,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = my_covmat_input)
G2
cor(G1)
cor(G2)
G12 <- rbind(G1, G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
mv1 <- c(c(0.384, 0.384, 0.384)) # mean vector for each dimension
mv1 <- c(c(0.384, 0.384, 0.384)) # mean vector for group1
sd_vec1 <- c(0.640, 0.640, 0.640) # sd vector for group1
mv2 <- c(c(-0.896, -0.896, -0.896)) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
my_cormat_input
my_covmat_input
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
my_covmat_input1
my_covmat_input2
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.7,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.3,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
mv2
mv2 <- c(0, 0, 0) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
mv1 <- c(c(0.384, 0.384, 0.384)) # mean vector for group1
sd_vec1 <- c(1, 1, 1) # sd vector for group1
mv2 <- c(0.5, 0.5, 0.5) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
mv1 <- c(c(0.384, 0.384, 0.384)) # mean vector for group1
sd_vec1 <- c(0.640, 0.640, 0.640) # sd vector for group1
mv2 <- c(-0.896, -0.896, -0.896) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
mv1 <- c(c(0.4, 0.4, 0.4)) # mean vector for group1
sd_vec1 <- c(0.640, 0.640, 0.640) # sd vector for group1
mv2 <- c(-0.896, -0.896, -0.896) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.3, 0.6, 0.75) # Perfect option
# convert the cor. vector to cor.matrix
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
cor(G2)
cor(G1)
cor(G12)
f_cor <- c(0.2, 0.5, 0.65) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
# Create theta from mixture distribution
size <- 300
library(AUTTT)
source('C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/working folder/Create theta.R', echo=TRUE)
library(AUTTT)
n_dim <- 3 # n. of dimensions
mv1 <- c(c(0.4, 0.4, 0.4)) # mean vector for group1
sd_vec1 <- c(0.640, 0.640, 0.640) # sd vector for group1
mv2 <- c(-0.896, -0.896, -0.896) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.2, 0.4, 0.65) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
moments::kurtosis(G12[,1])
moments::kurtosis(G12[,2])
moments::kurtosis(G12[,3])
cor(G12)
mv1 <- c(c(0.6, 0.6, 0.6)) # mean vector for group1
sd_vec1 <- c(0.640, 0.640, 0.640) # sd vector for group1
mv2 <- c(-0.896, -0.896, -0.896) # mean vector for group2
sd_vec2 <- c(1.109, 1.109, 1.109) # sd vector for group2
f_cor <- c(0.2, 0.4, 0.65) # Perfect option
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input1 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec1)
my_covmat_input2 <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input,
sd_vec=sd_vec2)
n_dim
sizes <- c(300)
set.seed(45679)
G1 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv1,
cov.mat = my_covmat_input1)
G2 <- MultiRNG::draw.d.variate.normal(no.row = size*0.5,
d = n_dim,
mean.vec = mv2,
cov.mat = my_covmat_input2)
G12 <- rbind(G1, G2)
cor(G1)
cor(G2)
cor(G12)
hist(G12[,1], prob=TRUE)
moments::skewness(G12[,1])
moments::skewness(G12[,2])
moments::skewness(G12[,3])
moments::kurtosis(G12[,1])
moments::kurtosis(G12[,2])
moments::kurtosis(G12[,3])
set.seed(45679)
Y <- MultiRNG::draw.d.variate.normal(no.row = sizes,
d = n_dim,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = my_covmat_input)
V <- rchisq(n=sizes, df=1)
# from two gamma distributions become beta
n <- 1000
a <- 3
b <- 2
u <- rgamma(n, shape=a, rate=1)
v <- rgamma(n, shape=b, rate=1)
x <- u / (u + v)
hist(x, prob=TRUE)
hist(u)
hist(v)
hist(x, prob=TRUE)
hist(u)
hist(v)
y <- seq(-3, 3, 0.01)
# plotting pdf of a gamma dist
# scale_par <- 1/5 # good one too
scale_par <- 1/5
par(mfrow=c(1,1))
plot(y, dgamma(y, shape=5, scale = scale_par))
plot(y, dgamma(y, shape = 5, scale = scale_par)/dnorm(y),
ylim=c(1,6),
xlim=c(0, 3.5),
ylab = expression("f(y)/g(y)"),
xlab = "A Random Variable Y")
abline(h=3.7)
c <- 3.7
# the selected constant is 5, according to the plot above.
# set.seed(45679) # good seed giving positive skewed dist.
# input values
library(AUTTT)
n_dim <- 3 # n. of dimensions
mean_vec <- c(-0.1, 0, 0.1) # mean vector for each dimension
sd_vec <- c(0.95, 0.98, 1.1) # sd vector for each dimension
f_cor <- c(0.49, 0.74, 0.87) # Perfect option
# convert the cor. vector to cor.matrix
my_cormat_input <- AUTTT::to_cormatrix(cor_vec = f_cor, n_dim=3)
my_covmat_input <- AUTTT::to_covmatrix(cor_matrix = my_cormat_input, sd_vec=sd_vec)
sizes <- c(300)
set.seed(4567999)
k <- 0 # counter for accepted
j <- 0 # counter for iterations
X <- matrix(rep(0, sizes[i]*n_dim), ncol=n_dim)
while (k < sizes[i]) {
j <- j+1
print(paste0("Iteration: ", j))
U <- runif(1, 0, 1)
# sample an observation from mvn
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = n_dim,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = my_covmat_input)
print("Values: ")
print(Y)
if (dgamma(Y[1], shape = 5, scale = scale_par)/(dnorm(Y[1])*c) > U &
dgamma(Y[2], shape = 5, scale = scale_par)/(dnorm(Y[2])*c) > U &
dgamma(Y[3], shape = 5, scale = scale_par)/(dnorm(Y[3])*c) > U){
# we accept y
k <- k + 1
X[k,1] <- Y[1]
X[k,2] <- Y[2]
X[k,3] <- Y[3]
}
}
skew <- moments::skewness(X)
kurt <- moments::kurtosis(X)
cor_mat <- cor(X)
cov_mat <- cov(X)
list("skew" = skew, "kurt" = kurt, "cor_mat" = cor_mat, "cov_mat" = cov_mat)
par(mfrow = c(2,2))
for (i in 1:3){
y <- sort(X[,i])
hist(y, prob=TRUE, ylim=c(0, 1))
lines(y, dgamma(y, shape = 5, scale=1/4))
}
list("skew" = skew, "kurt" = kurt, "cor_mat" = cor_mat, "cov_mat" = cov_mat)
hist(unscaled_3f_gamma300[,1], prob=TRUE)
y <- seq(-3, 3, .01)
lines(y, dgamma(y, shape = 5, scale=1/4))
Y_sorted <- sort(Y[,1])
lines(Y_sorted, dnorm(Y_sorted, -1, sqrt(0.9)))
moments::skewness(unscaled_3f_gamma300[,1])
#
hist(Y[,1], prob=TRUE)
Yseq <- seq(-4, 9, 0.1)
lines(Yseq, dnorm(Yseq, mean(Y), sd(Y)))
Ygamma_sorted <- sort(unscaled_3f_gamma300[,1])
lines(Ygamma_sorted, dgamma(Ygamma_sorted, 5, 1/4))
#
hist(Y[,1], prob=TRUE)
par(mfrow = c(1,1))
n <- 1000
u <- runif(n)
x <- u^(1/3)
hist(x, prob = TRUE) #density histogram of sample
y <- seq(0, 1, .01)
lines(y, 3*y^2) #density curve f(x)
hist(unscaled_3f_gamma300[,1], prob=TRUE)
x <- rnorm(300, 0, 1)
hist(x, prob=TRUE)
y <- seq(-3, 3, .01)
lines(y, dgamma(y, shape = 5, scale=1/4))
Y_sorted <- sort(Y[,1])
lines(Y_sorted, dnorm(Y_sorted, -1, sqrt(0.9)))
moments::skewness(unscaled_3f_gamma300[,1])
par(mfrow = c(1,1))
n <- 1000
u <- runif(n)
x <- u^(1/3)
hist(x, prob = TRUE) #density histogram of sample
y <- seq(0, 1, .01)
lines(y, 3*y^2) #density curve f(x)
x <- rnorm(size, 0, 1)
x
hist(x, prob = TRUE)
