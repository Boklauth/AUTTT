# class2
mean_vec <- rep(-0.5, 3) # mean vector for each dimension
sd_vec <- rep(1.109, 3) # sd vector for each dimension
f_cor2 <- c(0.03, 0.46, 0.665) # interfactor correlation vector
n2 <- 0.4*n
class2 <- create_theta_mvn(size = n2,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor2, # fcore2
seed_num = 123456)
output10 <- rbind(class1$X, class2$X)
cor(output10)
# correlaiton, rounded to 2 decimal place
round(cor(output10),2)
### descriptive stats ####
multi10 <- psych::mardia(scaled_output10, plot = FALSE)
multi10
### descriptive stats ####
multi10 <- psych::mardia(scaled_output10, plot = FALSE)
# Save standardized theta
scaled_output10 <- scale(output10)
### descriptive stats ####
multi10 <- psych::mardia(scaled_output10, plot = FALSE)
multi10
# Standardized Theta values
theta_mvn3 <- output3$scaled.X
mean(theta_mvn3)
mean(theta_mvn3[1,1])
mean(theta_mvn3[1,])
mean(theta_mvn3[2,])
sd(theta_mvn3[1,])
mean(output3$X[1,])
mean(theta_mvn3[1,])
?scale
colMeans(theta_mvn3[,1])
mean(theta_mvn3[,1])
sd(theta_mvn3[,1])
knitr::opts_chunk$set(echo = TRUE)
library(AUTTT)
library(psych)
library(tidyverse)
multi1
### descriptive stats ####
multi1 <- psych::mardia(theta_mvn1, plot = FALSE)
# Save all objects of thetas
#save(output1, file = paste0(getwd(), "/output/thetas", "/all_thetas_mvn300.RData"))
# Standardized Theta values
theta_mvn1 <- output1$scaled.X
colMeans(theta_mvn1)
round(colMeans(theta_mvn1),2)
round(colMeans(theta_mvn1),4)
apply(theta_mvn1, 2, mean)
round(apply(theta_mvn1, 2, mean),4)
apply(theta_mvn1, 2, sd)
z
# mean of each dimension, rounded to 4 decimal place
z_df <- theta_mvn1
round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
apply(z_df, 2, sd)
# sd of each dimension
sd_z <- apply(z_df, 2, sd)
m_z <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
print("mean:", z_m)
print("mean:", z_m)
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
print("mean:", z_m)
print(z_m)
print(paste0("mean: ", z_m))
print("mean")
z_m
print("mean", z_m)
message("mean", z_m)
rbind(z_m, z_sd)
rbind("mean", z_m, z_sd)
rbind(z_m, z_sd)
z_desc <- rbind(z_m, z_sd)
rownames(z_desc)
rownames(z_desc) <- c("Mean", "SD")
z_desc
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
z_desc
z_desc
multi1
### descriptive stats ####
multi1 <- psych::mardia(theta_mvn1, plot = FALSE)
multi1
# mean of each dimension, rounded to 4 decimal place
z_df <- theta_mvn2
# Save all objects of thetas
# save(output2, file = paste0(getwd(), "/output/thetas", "/all_thetas_mvn600.RData"))
# Standardized Theta values
theta_mvn2 <- output2$scaled.X
# mean of each dimension, rounded to 4 decimal place
z_df <- theta_mvn2
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
z_desc <- rbind(z_m, z_sd)
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
# final combined
z_desc
### descriptive stats ####
multi2 <- psych::mardia(theta_mvn2, plot = FALSE)
multi2
# mean of each dimension, rounded to 4 decimal place
z_df <- theta_mvn3
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
z_desc <- rbind(z_m, z_sd)
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
# final combined
z_desc
### descriptive stats ####
multi3 <- psych::mardia(theta_mvn3, plot = FALSE)
multi3
# mean of each dimension, rounded to 4 decimal place
z_df <- scaled_output10
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
z_desc <- rbind(z_m, z_sd)
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
# final combined
z_desc
### descriptive stats ####
multi10 <- psych::mardia(scaled_output10, plot = FALSE)
multi10
for (i in 1:3){
y <- sort(X[,i])
hist(y, prob=TRUE, ylim=c(0, 1))
# lines(y, dgamma(y, shape = 5, rate =5, log=FALSE))
}
X <- scaled_output10
par(mfrow = c(2,2))
for (i in 1:3){
y <- sort(X[,i])
hist(y, prob=TRUE, ylim=c(0, 1))
# lines(y, dgamma(y, shape = 5, rate =5, log=FALSE))
}
## Sample 600 ####
# class 1
mean_vec <- rep(0.384, 3) # mean vector for each dimension
sd_vec <- rep(0.640, 3) # sd vector for each dimension
f_cor1 <- c(0.08, 0.3, 0.62) # interfactor correlation vector
n <- 600
n1 <- 0.6*n
class1 <- create_theta_mvn(size = n1,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor1, # fcore1
seed_num = 45678)
# class2
mean_vec <- rep(-0.5, 3) # mean vector for each dimension
sd_vec <- rep(1.109, 3) # sd vector for each dimension
f_cor2 <- c(0.2, 0.455, 0.715) # interfactor correlation vector
n2 <- 0.4*n
class2 <- create_theta_mvn(size = n2,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor2, # fcore2
seed_num = 123456)
output11 <- rbind(class1$X, class2$X)
# correlation, rounded to 2 decimal place
round(cor(output11), 2)
# Save standardized theta
scaled_output11 <- scale(output11)
# Standardized theta
scaled_output11 <- scale(output11)
# mean of each dimension, rounded to 4 decimal place
z_df <- scaled_output11
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
z_desc <- rbind(z_m, z_sd)
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
# final combined
z_desc
### descriptive stats ####
multi11 <- psych::mardia(scaled_output11, plot = FALSE)
multi11
X <- scaled_output11
par(mfrow=c(1,1))
hist(sort(X[,1]))
## Sample 1200 ####
# class 1
mean_vec <- rep(0.384, 3) # mean vector for each dimension
sd_vec <- rep(0.640, 3) # sd vector for each dimension
f_cor1 <- c(0.08, 0.3, 0.62) # interfactor correlation vector
n <- 1200
n1 <- 0.6*n
class1 <- create_theta_mvn(size = n1,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor1, # fcore1
seed_num = 45678)
# class2
mean_vec <- rep(-0.5, 3) # mean vector for each dimension
sd_vec <- rep(1.109, 3) # sd vector for each dimension
f_cor2 <- c(0.165, 0.4, 0.73) # interfactor correlation vector
n2 <- 0.4*n
class2 <- create_theta_mvn(size = n2,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor2, # fcore2
seed_num = 123456)
output12 <- rbind(class1$X, class2$X)
# correlation, rounded to 2 decimal place
round(cor(output12), 2)
# Save standardized theta
scaled_output12 <- scale(output12)
# mean of each dimension, rounded to 4 decimal place
z_df <- scaled_output12
z_m <- round(colMeans(z_df),4) # faster version of round(apply(z_df, 2, mean),4)
# sd of each dimension
z_sd <- apply(z_df, 2, sd)
z_desc <- rbind(z_m, z_sd)
colnames(z_desc) <- c("F1", "F2", "F3")
rownames(z_desc) <- c("Mean", "SD")
# final combined
z_desc
### descriptive stats ####
multi12 <- psych::mardia(scaled_output12, plot = FALSE)
multi12
X <- scaled_output12
par(mfrow=c(1,1))
hist(sort(X[,1]))
hist(sort(X[,2]))
# set main directory: pick a directory
setwd("C:/Users/shh6304/Google Drive/CLASSES/0000_Dissertation/2_data_generation_production/output")
# create a folder to store raw data
if(!dir.exists(paste0(getwd(), "/one_study_cell"))){
dir.create(paste0(getwd(), "/one_study_cell"))
setwd(paste0(getwd(), "/one_study_cell"))
} else {
setwd(paste0(getwd(), "/one_study_cell"))
}
getwd()
# List model ####
model1 = list(seq(1,7, by=1),
seq(8,14, by=1),
seq(15,21, by=1))
set.seed(987654)
nvar <- 21 # 21 items
loadings1 <- runif(nvar, 0.4, 0.49) # low loadings
# Category endorsement probabilities ####
cat_prob2 <- c(0.04, 0.06, 0.11, 0.37, 0.42) # m. skewed
temp <- AUTTT::TSK(n=300, res_prop = cat_prob2)
T2 <- temp$thresholds
# thresholds matrix
thresholds_mat2 <- matrix(rep(T2, nvar),
nrow = nvar,
ncol=length(T2),
byrow = TRUE)
# sample sizes ####
N_sample <- NULL
N_sample[1] <- 300
# latent variables ####
# Latent class: negatively skewed ####
## Sample 300 ####
# class 1
mean_vec <- rep(0.384, 3) # mean vector for each dimension
sd_vec <- rep(0.640, 3) # sd vector for each dimension
f_cor1 <- c(0.08, 0.3, 0.62) # interfactor correlation vector
n <- 300
n1 <- 0.6*n
class1 <- create_theta_mvn(size = n1,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor1, # fcore1
seed_num = 45678)
# class2
mean_vec <- rep(-0.5, 3) # mean vector for each dimension
sd_vec <- rep(1.109, 3) # sd vector for each dimension
f_cor2 <- c(0.03, 0.46, 0.665) # interfactor correlation vector
n2 <- 0.4*n
class2 <- create_theta_mvn(size = n2,
mean_vec = mean_vec,
sd_vec = sd_vec,
ifcor_vec = f_cor2, # fcore2
seed_num = 123456)
output10 <- rbind(class1$X, class2$X)
cor(output10)
# Standardized theta
scaled_output10 <- scale(output10)
# replications ####
nReps <- 500
# Convert to IRT parameters
# A vector of item discrimination
a_vec <- loadings1/sqrt(1-loadings1^2)
# intercept parameters (DeMars, 2012)
d <- thresholds_mat2/sqrt(1-loadings1^2)
# Generate raw data: using the function ####
study_cell <- simdata_grm(model = model1,
theta_matrix = scaled_output10,
a = a_vec,
d = d,
N = N_sample[1],
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "sample")
# Data validation: response probabilities ####
study_cell$res_prob
study_cell$avg_res_prob
# Data validation: response probabilities ####
study_cell$res_prob[1:10,]
# Data validation: response probabilities ####
study_cell$res_prob[1:20,]
study_cell$avg_res_prob
# Data validation: response probabilities ####
study_cell$res_prob
# Data validation: response probabilities ####
study_cell$res_prob
study_cell$avg_res_prob
# data validation
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
getwd()
read.csv(file = paste0(getwd(),"/avg_response_probabilities.csv"))
avg_res_prob <- read.csv(file = paste0(getwd(),"/avg_response_probabilities.csv"))
res_prob <- read.csv(file = paste0(getwd(),"/response_probabilities.csv")
res_prob[1:42, ]
res_prob <- read.csv(file = paste0(getwd(),"/response_probabilities.csv")
res_prob[1:42, ]
res_prob
res_prob <- read.csv(file = paste0(getwd(),"/response_probabilities.csv"))
res_prob[1:42, ]
?execute_mplus_scripts
main_dir2 <- "C:/Users/shh6304/Desktop/test5"
load(paste0(main_dir2, "/folders.Rdata"))
for(i in 1:length(folders)){
print(folders[i])
}
# ML_probit ####
execute_mplus_scripts(main_dir = main_dir2,
cell_folders = folders,
est_folders = "ML_probit",
start_condition = 1,
end_condition = 1)
# load folders
setwd("C:/Users/shh6304/Desktop/test5")
load(paste0(getwd(), "/folders.Rdata"))
getwd()
# load folders
setwd("C:/Users/shh6304/Desktop/test5")
load(paste0(getwd(), "/folders.Rdata"))
setwd("C:/Users/shh6304/Desktop/test5")
load(paste0(getwd(), "/folders.Rdata"))
# check folders
folders[1:24]
nReps <- 5
for(i in 1:1){ # specify a number range or numbers to select a condition
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
# message
start_time <- Sys.time()
message("Start time: ", start_time)
# write and/or execute Mplus scripts
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("ML_probit"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE)
# message per replication
message(".....................")
}
# end of script writing and execution
# message
end_time <- Sys.time()
message("End time: ", end_time)
end_time - start_time
}
# load folders
my_dir <- "C:/Users/shh6304/Desktop/test5"
load(paste0(my_dir, "/folders.Rdata"))
# check folders
folders[1:24]
nReps <- 5
for(i in 1:1){ # specify a number range or numbers to select a condition
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
# message
start_time <- Sys.time()
message("Start time: ", start_time)
# write and/or execute Mplus scripts
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("ML_probit"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE)
# message per replication
message(".....................")
}
# end of script writing and execution
# message
end_time <- Sys.time()
message("End time: ", end_time)
end_time - start_time
}
study_cell
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
# load folders
main_dir2 <- "C:/Users/shh6304/Desktop/test5"
# load folders
main_dir2 <- "C:/Users/shh6304/Desktop/test5"
load(paste0(main_dir2, "/folders.Rdata"))
# check folders
folders[1:24]
nReps <- 5
for(i in 1:1){ # specify a number range or numbers to select a condition
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
# message
start_time <- Sys.time()
message("Start time: ", start_time)
# write and/or execute Mplus scripts
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("ML_probit"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE)
# message per replication
message(".....................")
}
# end of script writing and execution
# message
end_time <- Sys.time()
message("End time: ", end_time)
end_time - start_time
}
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
paste0(main_dir2, "/", folders[i], "/study_cell.Rdata")
# load folders
main_dir2 <- "C:/Users/shh6304/Desktop/test6"
load(paste0(main_dir2, "/folders.Rdata"))
# check folders
folders[1:24]
nReps <- 5
for(i in 1:1){ # specify a number range or numbers to select a condition
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
# message
start_time <- Sys.time()
message("Start time: ", start_time)
# write and/or execute Mplus scripts
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("ML_probit"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE)
# message per replication
message(".....................")
}
# end of script writing and execution
# message
end_time <- Sys.time()
message("End time: ", end_time)
end_time - start_time
}
nReps <- 5
for(i in 1:1){ # specify a number range or numbers to select a condition
message(paste0("Loading data model from: ", folders[i]))
load(paste0(main_dir2, "/", folders[i], "/study_cell.Rdata"))
message("Creating Mplus scripts in: ")
print(folders[i])
# message
start_time <- Sys.time()
message("Start time: ", start_time)
# write and/or execute Mplus scripts
for (r in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
estimators = c("MLR"),
rep = r,
type_montecarlo = FALSE,
run_files = FALSE)
# message per replication
message(".....................")
}
# end of script writing and execution
# message
end_time <- Sys.time()
message("End time: ", end_time)
end_time - start_time
}
