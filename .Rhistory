# Interfactor corr lines: ####
L16 <- '! Interfactor correlations'
# references: vfactor.cor, Fcor.tb
FCorlines <- NULL
for (i in 1:nrow(Fcor.tb)){
# use Fcor.tb to get labels of factors and match factor correlation
FCorlines[i] <-paste0('F', Fcor.tb[i,1], ' WITH ', 'F', Fcor.tb[i,2], '*',
vfactor.cor[i], ';', sep=' ')
}
# Extract the model for analysis ####
# titles
MS1 <-  paste0('TITLE: ', 'Analyze data in an MS model, N = ', N, ', R = ', R, ';')
MS1.2 <- paste0('TITLE: ', 'Analyze data in an MS model, N = ', N, ', R ', rep, ' of ', R, ';')
usedata <- paste0('DATA: FILE= ', file_dir, "/",
unlist(strsplit(naming_data_files, "\\*"))[1], 'list', '.dat;')
MS2 <- 'TYPE = MONTECARLO;'
MS3 <- 'VARIABLE:'
MS4 <- paste0('USEVARIABLES ARE ', Y[1], '-', Y[nYs], ';')
MS6 <- 'ANALYSIS:'
mplus_estimators <- c('ML', 'MLR', 'MLF', 'WLS','WLSM', 'WLSMV', 'ULS', 'ULSMV')
chosen_estimators <- mplus_estimators
parameterizations <- c('DELTA', 'THETA')
link_functions <- c('!TREAT CATEGORICAL VARS AS CONTINUOUS VARS', 'LINK IS LOGIT', 'LINK IS PROBIT')
# iterate estimator, parameterization, and link functions
# Note: only parameterization is applied to WLSMV and ULSMV.
est_para_linkf <- NULL
estimator_lines <- NULL
for (i in 1:length(chosen_estimators)){
est <- paste0('ESTIMATOR = ', chosen_estimators[i], ';') # ESTIMATOR
if(chosen_estimators[i] %in% c('WLSMV', 'ULSMV', 'ULS', 'WLSM', 'WLS')){
for (j in 1: length(parameterizations)){
para <- paste0('PARAMETERIZATION = ', parameterizations[j], ';') # parameterization for WLSMS/ULSMV (limited info)
est_para_linkf[i] <- paste(est, para)
estimator_lines <- rbind (estimator_lines, est_para_linkf[i])
}
} # end j iterations
if(chosen_estimators[i] %in% c('ML', 'MLR', 'MLF')){
for (k in 1: length(link_functions)){
linkf <- paste0(link_functions[k], ';')
est_para_linkf[i] <- paste(est, linkf)
estimator_lines <- rbind (estimator_lines, est_para_linkf[i])
}
} # end k iterations
} # end i iterations
MS7 <- 'MODEL:'
# model specifications
D <- NULL # dimensions and loadings
F_label <- NULL
model_spec<-NULL
for (i in 1:length(model)){
F_label[i] <- paste0('F', i)
# writing F_j BY
D[i] <- paste(F_label[i], 'BY ', sep=' ')
# iterate all loading lines per dimension
D[i] <- paste0(D[i], 'Y', min(unlist(model[i])), '-', 'Y', max(unlist(model[i])),
# add factor loadings to be estimated
'*','(',
'Load', min(unlist(model[i])), '-', 'Load', max(unlist(model[i])),
')',
sep=' ')
model_spec[i] <- paste0(D[i], ';')
}
# model specification
# model_spec
# Threholds
#nTs
#nYs
tau <- NULL
for (i in 1:nYs){
tau[i] <- paste0('[', Y[i], '$', 1, '-', Y[i], '$', nTs,'*', ']',
'(', Y[i], 'T',1, '-', Y[i], 'T', nTs, ')', ';')
}
# tau
MS8 <- '! Factor Mean'
# Factor mean
factor_means <-paste0('[', 'F', 1, '-', 'F', length(model), '*]',
'(', 'Fmean', 1, '-', 'Fmean', length(model), ');')
# Factor variance
factor_variances <-paste0('F', 1, '-', 'F', length(model),
'*(', 'Fvariance', 1, '-', 'Fvariance', length(model), ');')
# Model constraint
MS9 <- 'MODEL CONSTRAINT:'
model_constraint_m <- NULL
# model constraint
for (i in 1: length(model)){
model_constraint_m[i] <- paste0('Fmean', i, '= 0;')
}
model_constraint_v <- NULL
# model constraint
for (i in 1: length(model)){
model_constraint_v[i] <- paste0('Fvariance', i, '= 1;')
}
# interfactor correlation
# Factor correlations
FCor <- NULL
for (i in 1:nrow(Fcor.tb)){
# use Fcor.tb to get labels of factors and match factor correlation
FCor[i] <-paste0('F', Fcor.tb[i,1], ' WITH ', 'F', Fcor.tb[i,2],
';', sep=' ')
}
MS10 <- 'OUTPUT: STDYX;! Standardized solution'
# Saving output thetas syntax
MS11 <- 'SAVEDATA: SAVE = FSCORES; ! Saving factor scores'
# writing file name for factor scores
MS12 <- paste0('FILE = ',
gsub("\\*",
paste0(rep, "_fscores"),
naming_data_files))
usedata2 <- gsub("list", rep, usedata)
# need to iterate for all estimators
# Iterate scripts through estimators: estimator_lines
est_names <- c('ML',
'ML_logit',
'ML_probit',
'MLR',
'MLR_logit',
'MLR_probit',
'MLF',
'MLF_logit',
'MLF_probit',
'WLS_delta',
'WLS_theta',
'WLSM_delta',
'WLSM_theta',
'WLSMV_delta',
'WLSMV_theta',
'ULS_delta',
'ULS_theta',
'ULSMV_delta',
'ULSMV_theta')
# add monte carlo conditions
if (isTRUE(type_montecarlo)){
script_container <- NULL
for (i in 1:length(estimator_lines)){
if(i %in% c(1,4,7)){ # continuous estimators
script_container <- capture.output(
cat(L0, # Author info
MS1, # title
usedata, # put data file for analysis
MS2, # TYPE = MONTECARLO
MS3, # VARIABLE:
L3, # names are y variables
MS4, # usevariables are y variables
#L10, # categorical are
MS6, # ANALYSIS
# select estimator, parameterization, and link function
estimator_lines[i],
MS7, # MODEL:
model_spec,
#L14, # thresholds title
#tau, # threshold lines
FCor, # interactor correlations
MS8, # Factor mean title
factor_means, # Factor mean
L13,# factor variance title
factor_variances, # factor variances
MS9, # model constraint
model_constraint_m, # constraining factor means
model_constraint_v, # constraining factor variance
MS10, # output, standardized solution
sep='\n')
)
} else {
script_container <- capture.output(
cat(L0, # Author info
MS1, # title
usedata, # put data file for analysis
MS2, # TYPE = MONTECARLO
MS3, # VARIABLE:
L3, # names are y variables
MS4, # usevariables are y variables
L10, # categorical are
MS6, # ANALYSIS
# select estimator, parameterization, and link function
estimator_lines[i],
MS7, # MODEL:
model_spec,
#L14, # thresholds title
#tau, # threshold lines
FCor, # interactor correlations
MS8, # Factor mean title
factor_means, # Factor mean
L13,# factor variance title
factor_variances, # factor variances
MS9, # model constraint
model_constraint_m, # constraining factor means
model_constraint_v, # constraining factor variance
MS10, # output, standardized solution
sep='\n')
)
} # end categorical estimators
# assign estimator name to script
assign(est_names[i], script_container)
script_container <- NULL
} # end iterations for all estimators
# creating folders
folder <- NULL
for (j in 1:length(estimators)){
# create a new directory to store script of different estimator
if(isFALSE(dir.exists(paste0(file_dir, "/", estimators[j])))){ # not exist, create
dir.create(paste0(file_dir, "/", estimators[j]))
folder[j] <- paste0(file_dir, "/", estimators[j])
} else { # if exist, remove, then create
folder[j] <- paste0(file_dir, "/", estimators[j])
}
# writing an mplus script data analysis to file
# add condition from ther user: if the user's estimator, then write
# otherwise, don't write
for (i in 1:length(est_names)){
if (est_names[i] %in% estimators[j]){ # matching user's estimator
filename_obj <- paste0(folder[j], "/", est_names[i],"_replist", '.inp')
message(paste0("creating:", filename_obj))
# write file
write.table(get(est_names[i]),# get the assigned object
file = filename_obj,
row.names = FALSE,
col.names = FALSE,
quote=FALSE) # use quote = FALSE to eliminate quotes in text
if (isTRUE(run_files)){
message(paste0("running: ", filename_obj))
MplusAutomation::runModels(filename_obj)
message(paste0("done: ", filename_obj))
}
}
}
}
mplus_script <- list('ML' = ML,
'MLR' = MLR,
'MLF' = MLF,
'ML_logit'	= ML_logit,
'ML_probit'	= ML_probit,
'MLR_logit'	= MLR_logit,
'MLR_probit'	= MLR_probit,
'MLF_logit'	= MLF_logit,
'MLF_probit'	= MLF_probit,
'WLS_delta'	= WLS_delta,
'WLS_theta'	= WLS_theta,
'WLSM_delta'	= WLSM_delta,
'WLSM_theta'	= WLSM_theta,
'WLSMV_delta'	= WLSMV_delta,
'WLSMV_theta'	= WLSMV_theta,
'ULS_delta'	= ULS_delta,
'ULS_theta'	= ULS_theta,
'ULSMV_delta'	= ULSMV_delta,
'ULSMV_theta'	= ULSMV_theta,
'script_list' = c('montecarlo_data', est_names))
} # end type_montecarlo = TRUE
if (isFALSE(type_montecarlo)){
script_container <- NULL
for (i in 1:length(estimator_lines)){
if(i %in% c(1, 4, 7)){ # continuous estimators
script_container <- capture.output(
cat(L0, # Author info
MS1.2, # changed title from MS1 to MS1.2
usedata2, # put data file for a specific rep for analysis
#MS2, # TYPE = MONTECARLO
MS3, # VARIABLE:
L3, # names are y variables
MS4, # usevariables are y variables
#L10, # categorical are
MS6, # ANALYSIS
# select estimator, parameterization, and link function
estimator_lines[i],
MS7, # MODEL:
model_spec,
#L14, # thresholds title
#tau, # threshold lines
FCor, # interactor correlations
MS8, # Factor mean title
factor_means, # Factor mean
L13,# factor variance title
factor_variances, # factor variances
MS9, # model constraint
model_constraint_m, # constraining factor means
model_constraint_v, # constraining factor variance
MS10, # output, standardized solution
MS11, # SAVEDATA, FSCORES
MS12, # naming the factor score file
sep='\n')
)
} else {
script_container <- capture.output(
cat(L0, # Author info
MS1.2, # changed title from MS1 to MS1.2
usedata2, # put data file for a specific rep for analysis
#MS2, # TYPE = MONTECARLO
MS3, # VARIABLE:
L3, # names are y variables
MS4, # usevariables are y variables
L10, # categorical are
MS6, # ANALYSIS
# select estimator, parameterization, and link function
estimator_lines[i],
MS7, # MODEL:
model_spec,
#L14, # thresholds title
#tau, # threshold lines
FCor, # interactor correlations
MS8, # Factor mean title
factor_means, # Factor mean
L13,# factor variance title
factor_variances, # factor variances
MS9, # model constraint
model_constraint_m, # constraining factor means
model_constraint_v, # constraining factor variance
MS10, # output, standardized solution
MS11, # SAVEDATA, FSCORES
MS12, # naming the factor score file
sep='\n')
)
} # end categorical estimators
# assign estimator name to script
assign(est_names[i], script_container)
script_container <- NULL
}
# writing an mplus script data analysis to file
# adding user's estimators
folder <- NULL
for (j in 1:length(estimators)){
# create a new directory to store script of different estimator
if(isFALSE(dir.exists(paste0(file_dir, "/", estimators[j])))){ # not exist, create
dir.create(paste0(file_dir, "/", estimators[j]))
folder[j] <- paste0(file_dir, "/", estimators[j])
} else { # if exist, remove, then create
folder[j] <- paste0(file_dir, "/", estimators[j])
}
for (i in 1:length(est_names)){
if (est_names[i] %in% estimators[j]){ # matching user's estimator
filename_obj <- paste0(folder[j], "/", est_names[i],"_rep", rep, '.inp')
message(paste0("creating:", filename_obj))
# write file
write.table(get(est_names[i]),# get the assigned object
file = filename_obj,
row.names = FALSE,
col.names = FALSE,
quote=FALSE) # use quote = FALSE to eliminate quotes in text
if (isTRUE(run_files)){
message(paste0("running: ", filename_obj))
MplusAutomation::runModels(filename_obj)
message(paste0("done: ", filename_obj))
}
}
}
}
mplus_script <- list('ML' = ML,
'MLR' = MLR,
'MLF' = MLF,
'ML_logit'	= ML_logit,
'ML_probit'	= ML_probit,
'MLR_logit'	= MLR_logit,
'MLR_probit'	= MLR_probit,
'MLF_logit'	= MLF_logit,
'MLF_probit'	= MLF_probit,
'WLS_delta'	= WLS_delta,
'WLS_theta'	= WLS_theta,
'WLSM_delta'	= WLSM_delta,
'WLSM_theta'	= WLSM_theta,
'WLSMV_delta'	= WLSMV_delta,
'WLSMV_theta'	= WLSMV_theta,
'ULS_delta'	= ULS_delta,
'ULS_theta'	= ULS_theta,
'ULSMV_delta'	= ULSMV_delta,
'ULSMV_theta'	= ULSMV_theta,
'script_list' = c('montecarlo_data', est_names))
} # end type_montecarlo = FALSE
} # function
unlink(x="C:/Users/shh6304/Desktop/test3", recursive = TRUE)
unlink(x="C:/Users/shh6304/Desktop/test3", recursive = TRUE)
# The best location is 'Desktop'.
# Mplus allows only upto 90 characters for directory.
# Create a director
main_dir2 <- "C:/Users/shh6304/Desktop/test3"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
nReps <- 5
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
## 2.2 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.3 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
## 2.4 Write Mplus Scripts ####
# create Mplus script for running all replications as Monte Carlo
# But the script is not executed yet.
for (i in 1:nReps){
mplus_montecarlo_analysis_grm2(model_object = study_cell,
# file_dir = getwd(),
estimators = c("MLR",
"ML_probit",
"WLSMV_delta",
"ULSMV_delta"),
rep = i,
type_montecarlo = FALSE,
run_files = FALSE
)
}
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without error.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
# folders
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# 2-configure your git ####
library(usethis)
use_git_config(user.name = "Bo Klauth", user.email="bklauth@gmail.com")
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/AUTTT")
document()
rm(list = c("mplus_montecarlo_analysis_grm", "mplus_montecarlo_analysis_grm2"))
# run the function below. #
setwd("C:/Users/shh6304/Google Drive/000_Projects/8_creating R packages/AUTTT")
document()
