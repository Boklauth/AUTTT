for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
return(my_newdata)
}
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
mydata = unscaled_3f_uni300
n_dim
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
my_newdata
scale_33 <- function(mydata, n_dim){
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
return(my_newdata)
}
}
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
# return(my_newdata)
}
scale_33 <- function(mydata, n_dim){
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
# return(my_newdata)
}
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
Y <- runif(nrow(mydata), -3, 3)
Y
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
my_newdata
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
# return(my_newdata)
}
my_newdata
scale_33 <- function(mydata, n_dim){
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
# return(my_newdata)
}
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
scale_33 <- function(mydata, n_dim){
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
return(my_newdata)
}
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
scale_33 <- function(mydata, n_dim){
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
}
return(my_newdata)
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
scaled33_3f_uni600 <- scale_33(mydata = unscaled_3f_uni300,
n_dim)
scaled33_3f_uni600 <- scale_33(mydata = unscaled_3f_uni600,
n_dim)
scaled33_3f_uni600
scale_33 <- function(mydata){
n_dim <- ncol(mydata)
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
print(i)
Y <- runif(nrow(mydata), -3, 3)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
}
return(my_newdata)
}
scale_33(mydata = unscaled_3f_uni300,
n_dim)
scale_33(mydata = unscaled_3f_uni300)
scaled33_3f_uni600 <- scale_33(mydata = unscaled_3f_uni600)
scaled33_3f_uni600 <- scale_33(mydata = unscaled_3f_uni600)
scaled33_3f_uni600
scale_33 <- function(mydata, min, max){
n_dim <- ncol(mydata)
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
Y <- runif(nrow(mydata), min, max)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
}
return(my_newdata)
}
scale_33(mydata = unscaled_3f_uni300)
scale_33(mydata = unscaled_3f_uni300, min=-3, max=3)
scaled33_3f_uni600 <- scale_33(mydata = unscaled_3f_uni600, min=-3, max=3)
scaled33_3f_uni600
scaled33_3f_uni1200 <- scale_33(mydata = unscaled_3f_uni1200, min=-3, max=3)
scaled33_3f_uni1200
scale_33 <- function(mydata, min, max){
n_dim <- ncol(mydata)
my_newdata <- matrix(rep(0, nrow(mydata)*n_dim), nrow=nrow(mydata), ncol=n_dim)
for (i in 1:n_dim){
set.seed(123456)
Y <- runif(nrow(mydata), min, max)
my_newdata[,i] <- mydata[,i]*sd(Y)/sd(mydata[,i]) +
(mean(Y) - mean(mydata[,i])*sd(Y)/sd(mydata[,i]))
}
return(my_newdata)
}
cor(scaled33_3f_uni1200)
summary(scaled33_3f_uni1200)
summary(scaled33_3f_uni300)
summary(scaled33_3f_uni600)
summary(scaled33_3f_uni1200)
# scaled to -3 and 3
scaled33_3f_uni300 <- scale_33(mydata = unscaled_3f_uni300, min=-3, max=3)
summary(scaled33_3f_uni300)
data <- scaled33_3f_uni300
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
data <- scaled33_3f_uni600
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
data <- scaled33_3f_uni1200
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
# theta for one dimension
scaled33_1f_uni300 <- scale(scaled33_3f_uni300)[,1]
scaled33_1f_uni600 <- scale(scaled33_3f_uni300)[,1]
scaled33_1f_uni1200 <- scale(scaled33_3f_uni300)[,1]
summary(unscaled_3f_mvn300)
summary(unscaled_3f_mvn300)
summary(unscaled_3f_mvn300)
data <- unscaled_3f_mvn300
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
data <- unscaled_3f_mvn600
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
data <- unscaled_3f_mvn1200
par(mfrow=c(1,3))
hist(data[,1], prob=TRUE)
hist(data[,2], prob=TRUE)
hist(data[,3], prob=TRUE)
# theta for one dimension
unscaled_1f_mvn300 <- unscaled_3f_mvn300[,1]
unscaled_1f_mvn600 <- unscaled_3f_mvn600[,1]
unscaled_1f_mvn1200 <- unscaled_3f_mvn1200[,1]
unscaled_1f_mvn300
cor(unscaled_1f_mvn300)
cor(unscaled_3f_mvn300)
cov(unscaled_3f_mvn300)
cor(unscaled_3f_mvn300)
cov(unscaled_3f_mvn300)
cor(unscaled_3f_mvn300)
summary(scaled33_3f_uni1200)
# theta for one dimension
scaled33_1f_uni300 <- scaled33_3f_uni300[,1]
scaled33_1f_uni600 <- scaled33_3f_uni300[,1]
scaled33_1f_uni1200 <- scaled33_3f_uni300[,1]
sizes <- c(300, 600,900)
paste0("unscaled_", n_dim, "f_", "gamma", sizes[i])
for (i in 1:length(sizes)){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < n) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
}
unscaled_3f_gamma900
unscaled_3f_gamma300
unscaled_3f_gamma300
unscaled_3f_gamma900
unscaled_3f_gamma1200
sizes[i]
sizes <- c(300, 600,900)
for (i in 1:length(sizes)){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < n) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
}
unscaled_3f_gamma300
unscaled_3f_gamma900
unscaled_3f_gamma1200
sizes[i]
sizes <- c(300, 600,900)
length(sizes)
sizes <- c(300, 600,900)
for (i in 1:length(sizes)){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
}
unscaled_3f_gamma300
unscaled_3f_gamma900
unscaled_3f_gamma1200
sizes[i]
length(sizes)
c(300, 600,900)
sizes <- c(300, 600,900)
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
}
unscaled_3f_gamma300
unscaled_3f_gamma900
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma900
unscaled_3f_gamma1200
sizes[i]
sizes <- c(300, 600,1200)
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, n)
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma600
unscaled_3f_gamma1200
unscaled_3f_gamma300
sizes <- c(300, 600,1200)
for (i in 1:3){
c <- 5
k <- 0 # counter for accepted
j <- 0 # counter for iterations
x <- rep(0, sizes[i])
x2 <-x
x3 <- x
while (k < sizes[i]) {
u1 <- runif(1, -3, 3)
# u2 <- runif(1, -3, 3)
# u3 <- runif(1, -3, 3)
u2 <- u1
u3 <- u1
Y <- MultiRNG::draw.d.variate.normal(no.row = 1,
d = 3,
mean.vec = c(-0.1, 0, 0.1),
cov.mat = f_cov_matrix)
y1 <- sample(Y[,1], 1, replace = TRUE)
y2 <- sample(Y[,2], 1, replace = TRUE)
y3 <- sample(Y[,3], 1, replace = TRUE)
if (dgamma(y1, shape = 5, scale = scale_par)/(dnorm(y1)*c) > u1 &
dgamma(y2, shape = 5, scale = scale_par)/(dnorm(y2)*c) > u2 &
dgamma(y3, shape = 5, scale = scale_par)/(dnorm(y3)*c) > u3){
# we accept y
k <- k + 1
x[k] <- y1
x2[k] <- y2
x3[k] <- y3
}
}
mythetas <- cbind(x, x2, x3)
assign(paste0("unscaled_", n_dim, "f_", "gamma", sizes[i]), mythetas)
print(sizes[i])
}
unscaled_3f_gamma300
unscaled_3f_gamma600
unscaled_3f_gamma1200
# data, unscaled
unscaled_3f_gamma300
library(NSC)
?NSC
# tools for making an R function
#install.packages('devtools')
library(devtools) # for creating an R package
# tools for documenting your functions
#install.packages('roxygen2')
library(roxygen2) # for documentation
#install.packages("Rdpack")
library("Rdpack") # for adding references
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
rm("TSK")
# set project directory
# This is to make sure we work in the right project folder
proj_set("C:/Users/shh6304/Documents/AUTTT", force=FALSE)
# run the function below. #
setwd("C:/Users/shh6304/Documents/AUTTT")
document()
# use load_all() to view documentations
devtools::load_all()
?TSK
?to_cormatrix
?create_theta_mvn
?simdata_grm
?simdata_faov
?simdata_grm
