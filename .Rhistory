# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
theta_label <- c('MVN', 'MVN', 'MVN', 'MNS', 'MNS', 'MNS')
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
library(AUTTT)
# The best location is 'Desktop'.
# Mplus allows only upto 90 characters for directory.
# Create a director
main_dir2 <- "C:/Users/BK/Desktop/t8"
if(dir.exists(main_dir2)){
setwd(main_dir2)
}else {
dir.create(main_dir2)
setwd(main_dir2)
}
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without error.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
# folders
folders <- folder_list
main_dir2
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", M_index))
message("Factor loading level: ")
message(paste0("loadings", M_index))
print(factor_loadings)
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", L_index)) # was M_index
message("Factor loading level: ")
message(paste0("loadings", M_index))
print(factor_loadings)
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
expected_cells <- theta_index*M_index*L_index*T_index
if(P_index == expected_cells){
message("Finished data simulation without error.")
message("Finish Mplus script writing without error.")
} else {
message("Failed to simulate data for all conditions.")
message("Failed to write Mplus scripts.")
}
# folders
folders <- folder_list
main_dir2
save(folders, file = paste0(main_dir2, "/folders.Rdata"))
nReps <- 5 # replications
theta_index <- 1
M_index <- 1
L_index <- 1
T_index <- 1
P_index <- 0
folder_list <- NULL
for (theta_index in 1:6){ # theta distributions
for (M_index in 1:1){ # model index
for (L_index in 1:2){ # loading index
for (T_index in 1:2){ # threshold index
# start content
# 1-set up variables ####
P_index <- P_index + 1 # numbering cell/condition
model <- get(paste0("model", M_index)) # model
ncat <- ncol(get(paste0("thresholds_mat", T_index)))+1 # n. of categories
factor_loadings <- get(paste0("loadings", L_index)) # was M_index
message("Factor loading level: ")
message(paste0("loadings", L_index))
print(factor_loadings)
theta_val <- get(paste0("theta", theta_index))
sample_size <- nrow(theta_val)
thresholds_mat <- get(paste0("thresholds_mat", T_index))
# Convert to IRT parameters
## A vector of item discrimination ####
a_vec <- factor_loadings/sqrt(1-factor_loadings^2)
## intercept parameters (DeMars, 2012) ####
d <- thresholds_mat/sqrt(1-factor_loadings^2)
## Naming a folder ####
data_folder <- paste0("C", P_index, "_",
"N", sample_size, "_", # sample size
theta_label[theta_index], "_", # theta distribution
# "F", length(model),"_", # dimensionality
# "Length", length(unlist(model)), "_", # n of items
"L", loading_label[L_index],"_",
# "C", ncat,"_",
"I", threshold_label[T_index]
)
folder_list <- rbind(folder_list, data_folder)
# message: creating folder
setwd(main_dir2)
message(paste0("creating a folder: ",data_folder))
# creating folder if not existed
if(isFALSE(dir.exists(paste0(getwd(), "/", data_folder)))){
dir.create(paste0(getwd(), "/", data_folder))
# message: created: data_folder
message(paste0("created: ", data_folder))
# message: set directory for storing data
message(paste0("set working directory to: ", getwd(), "/", data_folder))
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
} else {
# set working directory for replicated data sets
setwd(paste0(getwd(), "/", data_folder))
}
# 2-Simulate raw data and scripts####
## 2.1 Generate raw data: using the function ####
message(paste0("Creating ", nReps, " data sets for the condition."))
study_cell <- simdata_grm(model = model,
theta_matrix = theta_val,
a = a_vec,
d = d,
# N = sample_size,
R = nReps,
method = "U",
file_dir = getwd(),
file_prefix = "bk")
# 2.2 Save model results
message(paste0("Saving data model at: ", getwd()))
save(study_cell, file = paste0(getwd(), "/study_cell.Rdata"))
## 2.3 Output data validation ####
# study_cell$res_prob
print(study_cell$avg_res_prob)
write.csv(t(study_cell$avg_res_prob),
file= paste0(getwd(),"/avg_response_probabilities.csv"),
row.names = FALSE)
write.csv(study_cell$res_prob,
file= paste0(getwd(),"/response_probabilities.csv"),
row.names = FALSE)
## 2.4 message: done with R replications with the condition
message(paste0("Done with C", P_index, ": replication ", nReps))
}
}
}
}
